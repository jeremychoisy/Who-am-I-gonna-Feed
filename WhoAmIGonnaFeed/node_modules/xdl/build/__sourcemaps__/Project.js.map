{"version":3,"sources":["Project.js"],"names":["async","projectDir","packagerPort","expoServerPort","await","ProjectSettings","readPackagerInfoAsync","currentStatus","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","getManifestUrlWithFallbackAsync","ErrorCode","NO_PROJECT_ROOT","_assertValidProjectRoot","rangeStart","let","port","freeportAsync","NO_PORT_FOUND","_getFreePortAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","request","get","headers","statusCode","body","JSON","parse","e","ProjectUtils","logError","undefined","message","length","_getForPlatformAsync","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","_resolveGoogleServicesFile","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_resolveManifestAssets","options","exp","pkg","readConfigJsonAsync","configName","configFilenameAsync","NO_PACKAGE_JSON","slug","name","INVALID_MANIFEST","getSlugAsync","formData","append","releaseChannel","queryResult","Api","callMethodAsync","getLatestReleaseAsync","publicUrl","assetUrl","outputDir","_validatePackagerReadyAsync","assetPathToWrite","join","ensureDir","bundlesPathToWrite","packagerOpts","isDev","dev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","_writeArtifactSafelyAsync","logger","global","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","stringify","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","hashIds","uuid","v1","revisionId","encode","now","developer","tool","user","UserManager","ensureLoggedInAsync","id","username","bundleUrl","urljoin","dumpSourcemap","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","exportForAppHosting","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","paths","files","fileHashes","keyChunks","chunk","Object","keys","promises","key","logDebug","quiet","assetPath","p","copy","push","_saveAssetAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","PUBLISH_VALIDATION_ERROR","validPostPublishHooks","postPublish","hook","file","config","fn","_requireFromProject","error","_fn","HOOK_INITIALIZATION_ERROR","_fetchAndUploadAssetsAsync","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","ios","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","result","then","warn","stack","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","publishAsync","_createBlob","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","joiValidateAsync","INVALID_OPTIONS","toString","version","process","env","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","INVALID_BUNDLE","MINIMUM_BUNDLE_SIZE","sourceMapUrl","constructSourceMapUrlAsync","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","INVALID_ASSETS","androidAssetsJson","manifestAssets","absolutePath","md5hex","iosAssets","androidAssets","concat","_collectAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","minimatch","add","type","_configureExpForAssets","assetCdnPath","EXPO_CDN","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","pathToWrite","dirname","errorMsg","writeFile","publishSourceMapPath","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","_readFileForUpload","isNode","createReadStream","data","Blob","configPrefix","ThirdParty","getManifest","getConfigAsync","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","package","buildAsync","includes","delayAsync","_waitForRunningAsync","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","nodeModulesPath","customLogReporterPath","assetExts","nonPersistent","maxWorkers","Versions","gteSdkVersion","userPackagerOpts","uniq","cliOpts","reduce","val","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","treekill","stdout","setEncoding","stderr","pipe","split","_logPackagerOutput","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","statusUrl","timeoutPromise","setTimeout","WAIT_FOR_PACKAGER_TIMEOUT","race","treekillAsync","stopExpoServerAsync","app","express","use","bodyParser","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","shouldExposeEnvironmentVariableInManifest","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","manifestString","_cachedSignedManifest","signedManifest","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","require","serverDriver","serverOS","os","serverOSVersion","release","send","status","post","deviceId","deviceName","_handleDeviceLogs","close","expRc","readExpRcAsync","manifestPort","listen","address","saveRecentExpRootAsync","startExpoServerAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","ngrokConnectAsync","NGROK_ERROR","error_code","kill","ngrokKillAsync","resetProjectRandomnessAsync","_connectToNgrokAsync","getCurrentUsernameAsync","NO_PACKAGER_PORT","NO_EXPO_SERVER_PORT","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","base","startedTunnelsSuccessfully","TUNNEL_TIMEOUT","expoServerNgrokUrl","authtoken","ngrok","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","tag","_expoEventType","addListener","startTunnelsAsync","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","number","integer","setOptionsAsync","getUrlAsync","offline","DevSession","startSession","startAsync","stopSession","_stopInternalAsync","stopAsync","promisify","validate","connect","Request","defaults","resolveWithFullResponse","modulePath","indexOf","fullPath","decache","_stripPackagerOutputBox","output","re","found","level","_isIgnorableDuplicateModuleWarning","test","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","logs","i","obj","DEBUG","groupDepth","shouldHide","includesStack","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","has","toUpperCase"],"mappings":";;;;;;;;;;+BAyFOA,WAA6BC,UAA7BD,EAAyE;AAC9E,UAAM,EAAEE,YAAF,EAAgBC,cAAhB,KAAmCC,MAAMC,8CAAgBC,qBAAhBD,CAAsCJ,UAAtCI,CAA/C;AACA,QAAIH,gBAAgBC,cAApB,EAAoC;AAClC,aAAO,SAAP;AACF,KAFA,MAEO,IAAID,gBAAgBC,cAApB,EAAoC;AACzC,aAAO,KAAP;AACF,KAFO,MAEA;AACL,aAAO,QAAP;AACF;AACF,G;;kBATsBI,a;;;;;AAWtB;;;;gCACOP,WAA+CQ,WAA/CR,EAAoE;AACzE,WAAO;AACLS,WAAKL,MAAMM,gCAASC,yBAATD,CAAmCF,WAAnCE,CADN;AAELE,qBAAe;AAFV,KAAP;AAIF,G;;kBALsBC,+B;;;;;;gCAOtBb,WAAuCQ,WAAvCR,EAAoD;AAClD,QAAI,CAACQ,WAAL,EAAkB;AAChB,YAAM,4CAAaM,0CAAUC,eAAvB,EAAwC,2BAAxC,CAAN;AACF;AACF,G;;kBAJeC,uB;;;;;;gCAMfhB,WAAiCiB,UAAjCjB,EAA6C;AAC3CkB,QAAIC,OAAOf,MAAMgB,uDAAcH,UAAdG,CAAjBF;AACA,QAAI,CAACC,IAAL,EAAW;AACT,YAAM,4CAAaL,0CAAUO,aAAvB,EAAsC,yBAAtC,CAAN;AACF;;AAEA,WAAOF,IAAP;AACF,G;;kBAPeG,iB;;;;;;gCASftB,WAAoCQ,WAApCR,EAAiDS,GAAjDT,EAAsDuB,QAAtDvB,EAAgE,EAAEwB,SAAF,EAAaC,SAAb,EAAhEzB,EAA0F;AACxFS,UAAMC,gCAASgB,4BAAThB,CAAsCD,GAAtCC,EAA2Ca,QAA3Cb,CAAND;;AAEAS,QAAIS,UAAW,GAAElB,GAAI,aAAYc,QAAS,EAA1CL;AACAA,QAAIU,WAAWxB,MAAMyB,QAAQC,GAARD,CAAY;AAC/BpB,WAAKkB,OAD0B;AAE/BI,eAAS;AACP,6BAAqBR;AADd;AAFsB,KAAZM,CAArBX;;AAOA,QAAIU,SAASI,UAATJ,KAAwB,GAA5B,EAAiC;AAC/B,UAAIA,SAASK,IAAb,EAAmB;AACjBf,YAAIe,IAAJf;AACA,YAAI;AACFe,iBAAOC,KAAKC,KAALD,CAAWN,SAASK,IAApBC,CAAPD;AACF,SAFA,CAEE,OAAOG,CAAP,EAAU;AACVC,kDAAaC,QAAbD,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA2CT,SAASK,IAApDI;AACF;;AAEA,YAAIJ,SAASM,SAAb,EAAwB;AACtB,cAAIN,KAAKO,OAAT,EAAkB;AAChBH,oDAAaC,QAAbD,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA2CJ,KAAKO,OAAhDH;AACF,WAFA,MAEO;AACLA,oDAAaC,QAAbD,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA2CT,SAASK,IAApDI;AACF;AACF;AACF;AACA,YAAM,4CACJb,SADI,EAEH,gBAAeG,OAAQ,6BAA4BC,SAASI,UAAW,IAAxE,GACE,4EADF,GAEE,0FAJE,CAAN;AAMF;;AAEA,QAAI,CAACJ,SAASK,IAAV,IAAmBR,aAAaG,SAASK,IAATL,CAAca,MAAdb,GAAuBH,SAA3D,EAAuE;AACrE,YAAM,4CAAaD,SAAb,EAAyB,YAAWI,SAASK,IAAK,EAAlD,CAAN;AACF;;AAEA,WAAOL,SAASK,IAAhB;AACF,G;;kBAzCeS,oB;;;;;;gCA2Cf1C,WAA0CQ,WAA1CR,EAAuD2C,QAAvD3C,EAAiE;AAC/D,QAAI2C,SAASC,OAATD,IAAoBA,SAASC,OAATD,CAAiBE,kBAAzC,EAA6D;AAC3D,YAAMC,WAAW1C,MAAM2C,sCAAGC,QAAHD,CACrBE,cAAKC,OAALD,CAAazC,WAAbyC,EAA0BN,SAASC,OAATD,CAAiBE,kBAA3CI,CADqBF,EAErB,MAFqBA,CAAvB;AAIAJ,eAASC,OAATD,CAAiBE,kBAAjBF,GAAsCG,QAAtCH;AACF;AACF,G;;kBAReQ,0B;;;;;;gCAUfnD,WAAsCQ,WAAtCR,EAAmD2C,QAAnD3C,EAA6DoD,QAA7DpD,EAAuEqD,SAAS,KAAhFrD,EAAuF;AACrF,QAAI;AACF;AACA,YAAMsD,eAAe,CAAClD,MAAMmD,kCAAUC,oBAAVD,CAC1BZ,SAASc,UADiBF,CAAP,EAElBG,MAFkB,CAEX,UAAC,EAAEC,SAAF,EAAD;AAAA,eAAmB7B,mCAAIa,QAAJb,EAAc6B,SAAd7B,CAAnB;AAAA,OAFW,CAArB;;AAIA;AACA,YAAM8B,OAAOxD,MAAMyD,QAAQC,GAARD,CACjBP,aAAaS,GAAbT;AAAAA,sCAAiBtD,WAAO,EAAE2D,SAAF,EAAP3D,EAAyB;AACxC,gBAAMgE,YAAYlC,mCAAIa,QAAJb,EAAc6B,SAAd7B,CAAlB;AACA,cAAIkC,UAAUC,KAAVD,CAAgB,mBAAhBA,CAAJ,EAA0C;AACxC;AACA,mBAAOA,SAAP;AACF,WAHA,MAGO,IAAIjB,sCAAGmB,UAAHnB,CAAcE,cAAKC,OAALD,CAAazC,WAAbyC,EAA0Be,SAA1Bf,CAAdF,CAAJ,EAAyD;AAC9D,mBAAO3C,MAAMgD,SAASY,SAATZ,CAAb;AACF,WAFO,MAEA;AACL,kBAAMe,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAZ;AACA;AACAD,gBAAIE,cAAJF,GAAqBH,SAArBG;AACA;AACAA,gBAAIG,aAAJH,GAAoBR,SAApBQ;AACA,kBAAMA,GAAN;AACF;AACD,SAfDb;;AAAAA;AAAAA;AAAAA;AAAAA,WADiBO,CAAnB;;AAmBA;AACAP,mBAAaiB,OAAbjB,CAAqB,UAAC,EAAEK,SAAF,EAAD,EAAgBa,KAAhB;AAAA,eAA0BC,mCAAI9B,QAAJ8B,EAAcd,YAAY,KAA1Bc,EAAiCb,KAAKY,KAALZ,CAAjCa,CAA1B;AAAA,OAArBnB;AACF,KA5BA,CA4BE,OAAOlB,CAAP,EAAU;AACVlB,UAAIwD,YAAYrC,wCAAasC,UAA7BzD;AACA,UAAImC,MAAJ,EAAY;AACVqB,oBAAYrC,wCAAaC,QAAzBoC;AACF;AACA,UAAItC,EAAEiC,cAAN,EAAsB;AACpBK,kBACElE,WADFkE,EAEE,MAFFA,EAGG,4BAA2BtC,EAAEiC,cAAe,WAAUjC,EAAEkC,aAAc,yBAHzEI;AAKF,OANA,MAMO;AACLA,kBACElE,WADFkE,EAEE,MAFFA,EAGG,qEAAoEtC,EAAEI,OAAQ,GAHjFkC;AAKF;;AAEA,UAAIrB,MAAJ,EAAY;AACV,cAAM,IAAIe,KAAJ,CAAU,0BAAV,CAAN;AACF;AACF;AACF,G;;kBApDeQ,sB;;;;;;gCAgFR5E,WAA4BQ,WAA5BR,EAAiD6E,UAAkB,EAAnE7E,EAAuE;AAC5E;AACAkB,QAAI,EAAE4D,GAAF,EAAOC,GAAP,KAAe3E,MAAMiC,wCAAa2C,mBAAb3C,CAAiC7B,WAAjC6B,CAAzBnB;AACA,QAAI,CAAC4D,GAAD,IAAQ,CAACC,GAAb,EAAkB;AAChB,YAAME,aAAa7E,MAAMiC,wCAAa6C,mBAAb7C,CAAiC7B,WAAjC6B,CAAzB;AACA,YAAM,4CACJvB,0CAAUqE,eADN,EAEH,iBAAgBF,UAAW,uBAAsBzE,WAAY,EAF1D,CAAN;AAIF;;AAEA,QAAI,CAACsE,IAAIM,IAAL,IAAaL,IAAIM,IAArB,EAA2B;AACzBP,UAAIM,IAAJN,GAAWC,IAAIM,IAAfP;AACF,KAFA,MAEO,IAAI,CAACA,IAAIM,IAAT,EAAe;AACpB,YAAMH,aAAa7E,MAAMiC,wCAAa6C,mBAAb7C,CAAiC7B,WAAjC6B,CAAzB;AACA,YAAM,4CACJvB,0CAAUwE,gBADN,EAEH,GAAEL,UAAW,OAAMzE,WAAY,8BAF5B,CAAN;AAIF;AACA,WAAOsE,IAAIM,IAAX;AACF,G;;kBArBsBG,Y;;;;;;iCAuBfvF,WACLQ,WADKR,EAEL6E,OAFK7E,EAML;AACA;AACAkB,QAAIsE,WAAW,6CAAftE;AACAsE,aAASC,MAATD,CAAgB,WAAhBA,EAA6B,SAA7BA;AACAA,aAASC,MAATD,CAAgB,MAAhBA,GAAwBpF,MAAMmF,aAAa/E,WAAb+E,CAA9BC;AACAA,aAASC,MAATD,CAAgB,SAAhBA,EAA2B,GAA3BA;AACAA,aAASC,MAATD,CAAgB,OAAhBA,EAAyB,GAAzBA;AACAA,aAASC,MAATD,CAAgB,gBAAhBA,EAAkCX,QAAQa,cAA1CF;AACAA,aAASC,MAATD,CAAgB,UAAhBA,EAA4BX,QAAQtD,QAApCiE;AACA,UAAM,EAAEG,WAAF,KAAkBvF,MAAMwF,8BAAIC,eAAJD,CAAoB,aAApBA,EAAmC,EAAnCA,EAAuC,MAAvCA,EAA+C,IAA/CA,EAAqD;AACjFJ;AADiF,KAArDI,CAA9B;AAGA,QAAID,eAAeA,YAAYlD,MAAZkD,GAAqB,CAAxC,EAA2C;AACzC,aAAOA,YAAY,CAAZA,CAAP;AACF,KAFA,MAEO;AACL,aAAO,IAAP;AACF;AACF,G;;kBAvBsBG,qB;;;;;AAyBtB;;;;;;;;;;;;;;iCAWO9F,WACLQ,WADKR,EAEL+F,SAFK/F,EAGLgG,QAHKhG,EAILiG,SAJKjG,EAKL6E,UAAc,EALT7E,EAML;AACAI,UAAM8F,4BAA4B1F,WAA5B0F,CAAN9F;;AAEA;AACA,UAAM+F,mBAAmBlD,cAAKC,OAALD,CAAazC,WAAbyC,EAA0BA,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,QAArBA,CAA1BA,CAAzB;AACA7C,UAAM2C,sCAAGsD,SAAHtD,CAAaoD,gBAAbpD,CAAN3C;AACA,UAAMkG,qBAAqBrD,cAAKC,OAALD,CAAazC,WAAbyC,EAA0BA,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,SAArBA,CAA1BA,CAA3B;AACA7C,UAAM2C,sCAAGsD,SAAHtD,CAAauD,kBAAbvD,CAAN3C;;AAEA;AACAc,QAAIqF,eAAe,EAAnBrF;AACA,QAAI2D,QAAQ2B,KAAZ,EAAmB;AACjBD,qBAAe,EAAEE,KAAK,IAAP,EAAaC,QAAQ,IAArB,EAAfH;AACF;AACA,UAAM,EAAEI,SAAF,EAAaC,aAAb,KAA+BxG,MAAMyG,0BAA0BrG,WAA1BqG,EAAuCN,YAAvCM,CAA3C;AACA,UAAMC,gBAAgBC,gBACnBC,UADmBD,CACR,KADQA,EAEnBE,MAFmBF,CAEZJ,SAFYI,EAGnBG,MAHmBH,CAGZ,KAHYA,CAAtB;AAIA,UAAMI,eAAgB,OAAML,aAAc,KAA1C;AACA,UAAMM,YAAYnE,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,SAArBA,EAAgCkE,YAAhClE,CAAlB;;AAEA,UAAMoE,oBAAoBN,gBACvBC,UADuBD,CACZ,KADYA,EAEvBE,MAFuBF,CAEhBH,aAFgBG,EAGvBG,MAHuBH,CAGhB,KAHgBA,CAA1B;AAIA,UAAMO,mBAAoB,WAAUD,iBAAkB,KAAtD;AACA,UAAME,gBAAgBtE,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,SAArBA,EAAgCqE,gBAAhCrE,CAAtB;;AAEA7C,UAAMoH,0BAA0BhH,WAA1BgH,EAAuC,IAAvCA,EAA6CJ,SAA7CI,EAAwDb,SAAxDa,CAANpH;AACAA,UAAMoH,0BAA0BhH,WAA1BgH,EAAuC,IAAvCA,EAA6CD,aAA7CC,EAA4DZ,aAA5DY,CAANpH;AACAqH,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,6BAAnBA;;AAEA;AACA;AACA,UAAMG,iBAAiB/C,QAAQ+C,cAAR/C,IAA0B,EAAjD;AACA,UAAMC,MAAM1E,MAAMyH,0BAA0BrH,WAA1BqH,EAAuCD,cAAvCC,CAAlB;AACA,UAAM,EAAEC,MAAF,KAAa1H,MAAM2H,yBAAyBvH,WAAzBuH,EAAsCjD,GAAtCiD,EAA2ChC,SAA3CgC,EAAsD9B,SAAtD8B,CAAzB;;AAEA,QAAIlD,QAAQmD,YAAZ,EAA0B;AACxBP,0CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,oBAAnBA;AACA,YAAMQ,WAAW,EAAjB;AACAH,aAAOvD,OAAPuD,CAAeI,iBAAS;AACtBD,iBAASC,MAAMC,IAAfF,IAAuBC,KAAvBD;AACD,OAFDH;AAGA1H,YAAMoH,0BACJhH,WADIgH,EAEJ,IAFIA,EAGJvE,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,eAArBA,CAHIuE,EAIJtF,KAAKkG,SAALlG,CAAe+F,QAAf/F,CAJIsF,CAANpH;AAMF;;AAEA;AACA,WAAO0E,IAAIuD,KAAX;;AAEA;AACAvD,QAAIwD,gBAAJxD,GAAuBkB,QAAvBlB;;AAEAA,QAAIyD,aAAJzD,GAAoB,IAAI0D,IAAJ,GAAWC,WAAX,EAApB3D;AACAA,QAAI4D,UAAJ5D,GAAiB,IAAI0D,IAAJ,GAAWC,WAAX,EAAjB3D;;AAEA;AACA,UAAM6D,UAAU,0CAAYC,gCAAKC,EAALD,EAAZ,EAAuB,EAAvB,CAAhB;AACA9D,QAAIgE,UAAJhE,GAAiB6D,QAAQI,MAARJ,CAAeH,KAAKQ,GAALR,EAAfG,CAAjB7D;;AAEA,QAAID,QAAQ2B,KAAZ,EAAmB;AACjB1B,UAAImE,SAAJnE,GAAgB;AACdoE,cAAM;AADQ,OAAhBpE;AAGF;;AAEA,QAAI,CAACA,IAAIM,IAAT,EAAe;AACb,YAAM,4CACJtE,0CAAUwE,gBADN,EAEJ,qDAFI,CAAN;AAIF;AACA,UAAM6D,OAAO/I,MAAMgJ,gCAAYC,mBAAZD,EAAnB;AACAtE,QAAIwE,EAAJxE,GAAU,IAAGqE,KAAKI,QAAS,IAAGzE,IAAIM,IAAK,EAAvCN;;AAEA;AACAA,QAAI0E,SAAJ1E,GAAgB2E,2CAAQ1D,SAAR0D,EAAmB,SAAnBA,EAA8BnC,gBAA9BmC,CAAhB3E;AACAA,QAAIvD,QAAJuD,GAAe,SAAfA;AACA1E,UAAMoH,0BACJhH,WADIgH,EAEJ,IAFIA,EAGJvE,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,oBAArBA,CAHIuE,EAIJtF,KAAKkG,SAALlG,CAAe4C,GAAf5C,CAJIsF,CAANpH;;AAOA;AACA0E,QAAI0E,SAAJ1E,GAAgB2E,2CAAQ1D,SAAR0D,EAAmB,SAAnBA,EAA8BtC,YAA9BsC,CAAhB3E;AACAA,QAAIvD,QAAJuD,GAAe,KAAfA;AACA1E,UAAMoH,0BACJhH,WADIgH,EAEJ,IAFIA,EAGJvE,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,gBAArBA,CAHIuE,EAIJtF,KAAKkG,SAALlG,CAAe4C,GAAf5C,CAJIsF,CAANpH;;AAOA;AACA,QAAIyE,QAAQ6E,aAAZ,EAA2B;AACzB,YAAM,EAAEC,YAAF,EAAgBC,gBAAhB,KAAqCxJ,MAAMyJ,2BAA2BrJ,WAA3BqJ,EAAwC/E,GAAxC+E,EAA6C;AAC5FC,eAAO;AADqF,OAA7CD,CAAjD;AAGA;AACA,YAAME,aAAc,OAAMjD,aAAc,MAAxC;AACA,YAAMkD,aAAa/G,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,SAArBA,EAAgC8G,UAAhC9G,CAAnB;AACA7C,YAAMoH,0BAA0BhH,WAA1BgH,EAAuC,IAAvCA,EAA6CwC,UAA7CxC,EAAyDmC,YAAzDnC,CAANpH;;AAEA,YAAM6J,iBAAkB,WAAU5C,iBAAkB,MAApD;AACA,YAAM6C,iBAAiBjH,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,SAArBA,EAAgCgH,cAAhChH,CAAvB;AACA7C,YAAMoH,0BAA0BhH,WAA1BgH,EAAuC,IAAvCA,EAA6C0C,cAA7C1C,EAA6DoC,gBAA7DpC,CAANpH;;AAEA;AACAqH,0CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,wBAAnBA;AACArH,YAAM+J,mBAAmB/C,SAAnB+C,EAA8B,CAA9BA,CAAN/J;AACAA,YAAM+J,mBAAmB5C,aAAnB4C,EAAkC,CAAlCA,CAAN/J;;AAEA;AACAA,YAAM2C,sCAAGqH,UAAHrH,CAAcqE,SAAdrE,EAA0B,0BAAyBgH,UAAW,EAA9DhH,CAAN3C;AACAA,YAAM2C,sCAAGqH,UAAHrH,CAAcwE,aAAdxE,EAA8B,0BAAyBkH,cAAe,EAAtElH,CAAN3C;;AAEA;AACAqH,0CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,sCAAnBA;AACA,YAAM4C,YAAa;mBACJZ,2CAAQ,SAARA,EAAmBtC,YAAnBsC,CAAiC;mBACjCA,2CAAQ,SAARA,EAAmBnC,gBAAnBmC,CAAqC;;;KAFpD;AAMArJ,YAAMoH,0BACJhH,WADIgH,EAEJ,IAFIA,EAGJvE,cAAKmD,IAALnD,CAAUgD,SAAVhD,EAAqB,YAArBA,CAHIuE,EAIJ6C,SAJI7C,CAANpH;AAMF;AACF,G;;kBAjJsBkK,mB;;;;;AAmJtB;;;;iCACAtK,WAAkCuK,QAAlCvK,EAAoDwK,CAApDxK,EAA+D;AAC7D,UAAMyK,QAAQrK,MAAMsK,kDAAcC,IAAdD,CAAmBH,QAAnBG,EAA6BF,CAA7BE,CAApB;AACA,UAAME,cAAcH,MAAMhI,MAA1B;AACA,UAAM,EAAEoI,IAAF,KAAWzK,MAAM2C,sCAAG+H,IAAH/H,CAAQwH,QAARxH,CAAvB;AACA3C,UAAM2C,sCAAGgI,QAAHhI,CAAYwH,QAAZxH,EAAsB8H,OAAOD,WAA7B7H,CAAN3C;AACF,G;;kBALe+J,kB;;;;;;iCAOfnK,WAA+BQ,WAA/BR,EAA4C8H,MAA5C9H,EAAoDiG,SAApDjG,EAA+D;AAC7D;AACA,UAAMgL,QAAQ,EAAd;AACAlD,WAAOvD,OAAPuD,CAAeI,iBAAS;AACtBA,YAAM+C,KAAN/C,CAAY3D,OAAZ2D,CAAoB,UAACjF,IAAD,EAAOuB,KAAP,EAAiB;AACnCwG,cAAM9C,MAAMgD,UAANhD,CAAiB1D,KAAjB0D,CAAN8C,IAAiC/H,IAAjC+H;AACD,OAFD9C;AAGD,KAJDJ;;AAMA;AACA,UAAMqD,YAAYC,uCAAMC,OAAOC,IAAPD,CAAYL,KAAZK,CAAND,EAA0B,CAA1BA,CAAlB;AACA,SAAK,MAAME,IAAX,IAAmBH,SAAnB,EAA8B;AAC5B,YAAMI,WAAW,EAAjB;AACA,WAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;AACtBjJ,gDAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,aAAY2I,MAAMQ,GAANR,CAAW,EAAnE3I;;AAEAoF,4CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,EAAEiE,OAAO,IAAT,EAAnBjE,EAAqC,UAASuD,MAAMQ,GAANR,CAAW,EAAzDvD;;AAEAvG,YAAIyK,YAAY1I,cAAKC,OAALD,CAAagD,SAAbhD,EAAwB,QAAxBA,EAAkCuI,GAAlCvI,CAAhB/B;;AAEA;AACA,cAAM0K,IAAI7I,sCAAG8I,IAAH9I,CAAQiI,MAAMQ,GAANR,CAARjI,EAAoB4I,SAApB5I,CAAV;AACAwI,iBAASO,IAATP,CAAcK,CAAdL;AACF;AACAnL,YAAMyD,QAAQC,GAARD,CAAY0H,QAAZ1H,CAANzD;AACF;AACAqH,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,2BAAnBA;AACF,G;;kBA3BesE,e;;;;;;iCA6BR/L,WACLQ,WADKR,EAEL6E,UAAkB,EAFb7E,EAGkD;AACvD,UAAMmJ,OAAO/I,MAAMgJ,gCAAYC,mBAAZD,EAAnB;AACAhJ,UAAM8F,4BAA4B1F,WAA5B0F,CAAN9F;AACA4L,sCAAUC,QAAVD,CAAmB,SAAnBA,EAA8B;AAC5BxL,iBAD4B;AAE5B0L,qBAAeC,oCAAOD;AAFM,KAA9BF;;AAKA,UAAMI,mBAAmBhM,MAAMiM,4BAAOC,wBAAPD,CAAgC7L,WAAhC6L,CAA/B;AACA,QAAID,oBAAoBC,4BAAOE,KAA3BH,IAAoCA,qBAAqBC,4BAAOG,KAApE,EAA2E;AACzE,YAAM,4CACJ1L,0CAAU2L,wBADN,EAEJ,oGAFI,CAAN;AAIF;;AAEA;AACAvL,QAAI4D,MAAM1E,MAAMyH,0BAA0BrH,WAA1BqH,EAAuChD,OAAvCgD,CAAhB3G;;AAEA;AACAA,QAAI,EAAEmH,KAAF,KAAYvD,GAAhB5D;AACA,WAAO4D,IAAIuD,KAAX;AACAnH,QAAIwL,wBAAwB,EAA5BxL;AACA,QAAImH,SAASA,MAAMsE,WAAnB,EAAgC;AAC9BtE,YAAMsE,WAANtE,CAAkB9D,OAAlB8D,CAA0BuE,gBAAQ;AAChC1L,YAAI,EAAE2L,IAAF,EAAQC,MAAR,KAAmBF,IAAvB1L;AACAA,YAAI6L,KAAKC,oBAAoBH,IAApBG,EAA0BxM,WAA1BwM,CAAT9L;AACA,YAAI6L,OAAO,IAAX,EAAiB;AACftF,8CAAOC,MAAPD,CAAcwF,KAAdxF,CAAqB,oCAAmCoF,IAAK,GAA7DpF;AACF,SAFA,MAEO;AACLmF,eAAKM,GAALN,GAAWG,EAAXH;AACAF,gCAAsBZ,IAAtBY,CAA2BE,IAA3BF;AACF;AACD,OATDrE;;AAWA,UAAIqE,sBAAsBjK,MAAtBiK,KAAiCrE,MAAMsE,WAANtE,CAAkB5F,MAAvD,EAA+D;AAC7DgF,4CAAOC,MAAPD,CAAcwF,KAAdxF;;AAEA,cAAM,4CACJ3G,0CAAUqM,yBADN,EAEJ,iDAFI,CAAN;AAIF;AACF;;AAEAjM,QAAI,EAAEyF,SAAF,EAAaC,aAAb,KAA+BxG,MAAMyG,0BAA0BrG,WAA1BqG,CAAzC3F;;AAEAd,UAAMgN,2BAA2B5M,WAA3B4M,EAAwCtI,GAAxCsI,CAANhN;;AAEAc,QAAI,EAAEyI,YAAF,EAAgBC,gBAAhB,KAAqCxJ,MAAMyJ,2BAA2BrJ,WAA3BqJ,EAAwC/E,GAAxC+E,EAA6C;AAC1FC,aAAO4C,sBAAsBjK;AAD6D,KAA7CoH,CAA/C3I;;AAIAA,QAAIU,QAAJV;AACA,QAAI;AACFU,iBAAWxB,MAAMiN,sBAAsB;AACrCvI,WADqC;AAErC6B,iBAFqC;AAGrCC,qBAHqC;AAIrC/B;AAJqC,OAAtBwI,CAAjBzL;AAMF,KAPA,CAOE,OAAOQ,CAAP,EAAU;AACV,UAAIA,EAAEkL,WAAFlL,KAAkB,yBAAtB,EAAiD;AAC/C,cAAM,IAAIgC,KAAJ,CACH,oHADG,CAAN;AAGF;AACAmJ,kCAAOC,gBAAPD,CAAwBnL,CAAxBmL;AACA,YAAMnL,CAAN;AACF;;AAEAhC,UAAMqN,gCAAgC;AACpC3I,SADoC;AAEpCtE,iBAFoC;AAGpCmG,eAHoC;AAIpCC,mBAJoC;AAKpC+C,kBALoC;AAMpCC;AANoC,KAAhC6D,CAANrN;;AASA,QACEsM,sBAAsBjK,MAAtBiK,IACC5H,IAAI4I,GAAJ5I,IAAWA,IAAI4I,GAAJ5I,CAAQ6I,mBADpBjB,IAEC5H,IAAIlC,OAAJkC,IAAeA,IAAIlC,OAAJkC,CAAY6I,mBAH9B,EAIE;AACAzM,UAAI,CAAC0M,eAAD,EAAkBC,WAAlB,IAAiCzN,MAAMyD,QAAQC,GAARD,CAAY,CACrDiK,0CAAcC,gBAAdD,CAA+BlM,SAASnB,GAAxCqN,EAA6C;AAC3C,gCAAwBhJ,IAAIrB,UADe;AAE3C,6BAAqB,SAFsB;AAG3C,gCAAwBoB,QAAQa,cAHW;AAI3CsI,gBAAQ;AAJmC,OAA7CF,CADqD,EAOrDA,0CAAcC,gBAAdD,CAA+BlM,SAASnB,GAAxCqN,EAA6C;AAC3C,gCAAwBhJ,IAAIrB,UADe;AAE3C,6BAAqB,KAFsB;AAG3C,gCAAwBoB,QAAQa,cAHW;AAI3CsI,gBAAQ;AAJmC,OAA7CF,CAPqD,CAAZjK,CAA3C3C;;AAeA,YAAM+M,cAAc;AAClBxN,aAAKmB,SAASnB,GADI;AAElBqE,WAFkB;AAGlB6B,iBAHkB;AAIlBgD,oBAJkB;AAKlBkE,mBALkB;AAMlBjH,qBANkB;AAOlBgD,wBAPkB;AAQlBgE,uBARkB;AASlBpN,mBATkB;AAUlB0N,aAAKC,eAAO;AACV1G,8CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,EAAEiE,OAAO,IAAT,EAAnBjE,EAAoC0G,GAApC1G;AACD;AAZiB,OAApB;;AAeA,WAAKvG,IAAI0L,IAAT,IAAiBF,qBAAjB,EAAwC;AACtCjF,4CAAOC,MAAPD,CAAcE,IAAdF,CAAoB,6BAA4BmF,KAAKC,IAAK,EAA1DpF;AACA,YAAI;AACFvG,cAAIkN,SAASxB,KAAKM,GAALN;AACXE,oBAAQF,KAAKE;AADFF,aAERqB,WAFQrB,EAAb1L;;AAKA;AACA,cAAIkN,UAAUA,OAAOC,IAArB,EAA2B;AACzBD,qBAAShO,MAAMgO,MAAfA;AACF;;AAEA,cAAIA,MAAJ,EAAY;AACV3G,gDAAOC,MAAPD,CAAcE,IAAdF,CAAmB,EAAEiE,OAAO,IAAT,EAAnBjE,EAAoC2G,MAApC3G;AACF;AACF,SAdA,CAcE,OAAOrF,CAAP,EAAU;AACVqF,8CAAOC,MAAPD,CAAc6G,IAAd7G,CAAoB,8BAA6BmF,KAAKC,IAAK,aAAYzK,EAAEmM,KAAM,EAA/E9G;AACF;AACF;;AAEA,UAAI3C,IAAI4I,GAAJ5I,IAAWA,IAAI4I,GAAJ5I,CAAQ6I,mBAAvB,EAA4C;AAC1CvN,cAAMoH,0BACJhH,WADIgH,EAEJ,yBAFIA,EAGJ1C,IAAI4I,GAAJ5I,CAAQ6I,mBAHJnG,EAIJtF,KAAKkG,SAALlG,CAAe2L,WAAf3L,CAJIsF,CAANpH;AAMA,cAAMoO,UAAUC,0DAAkBC,iBAAlBD,CAAoCjO,WAApCiO,EAAiD3J,GAAjD2J,CAAhB;AACA,cAAM,EAAEE,mBAAF,KAA0BC,wCAAaC,QAAbD,CAAsBJ,OAAtBI,CAAhC;AACAxO,cAAM0O,gCAASC,WAATD,CAAqBH,mBAArBG,EAA0C,SAA1CA,EAAqDE,sBAAc;AACvEA,qBAAWtJ,cAAXsJ,GAA4BnK,QAAQa,cAApCsJ;AACA,iBAAOA,UAAP;AACD,SAHKF,CAAN1O;AAIF;;AAEA,UAAI0E,IAAIlC,OAAJkC,IAAeA,IAAIlC,OAAJkC,CAAY6I,mBAA/B,EAAoD;AAClDvN,cAAMoH,0BACJhH,WADIgH,EAEJ,6BAFIA,EAGJ1C,IAAIlC,OAAJkC,CAAY6I,mBAHRnG,EAIJtF,KAAKkG,SAALlG,CAAe0L,eAAf1L,CAJIsF,CAANpH;AAMF;;AAEA;AACA;AACA,UAAI0E,IAAIlC,OAAJkC,IAAeA,IAAIlC,OAAJkC,CAAY6I,mBAA3B7I,IAAkDA,IAAIlC,OAAJkC,CAAYmK,iBAAlE,EAAqF;AACnF/N,YAAIgO,kBAAkBtN,SAASnB,GAATmB,CAAauN,OAAbvN,CAAqB,QAArBA,EAA+B,UAA/BA,CAAtBV;AACAA,YAAIkO,gBAAgBnM,cAAKmD,IAALnD,CAClBzC,WADkByC,EAElB,SAFkBA,EAGlB,KAHkBA,EAIlB,KAJkBA,EAKlB,MALkBA,EAMlB,MANkBA,EAOlB,MAPkBA,EAQlB,KARkBA,EASlB,UATkBA,EAUlB,WAVkBA,EAWlB,mBAXkBA,CAApB/B;AAaAd,cAAM0N,0CAAcuB,sBAAdvB,CACH,0BADGA,EAEH,wBAFGA,EAGJsB,aAHItB,CAAN1N;AAKAA,cAAM0N,0CAAcwB,cAAdxB,CACJ,gCADIA,EAEH;;;gEAGuDoB,eAAgB;gEAChBtB,gBAAgBpE,SAAU;kCAN9EsE,EAQJsB,aARItB,CAAN1N;AAUAA,cAAM0N,0CAAcwB,cAAdxB,CACJ,2BADIA,EAEH,sBAAqBjJ,QAAQa,cAAe,GAFzCoI,EAGJsB,aAHItB,CAAN1N;AAKF;AACF;;AAEA;AACA,QAAI0E,IAAIyK,QAAR,EAAkB;AAChBnP,YAAMoP,4BAA4B;AAChCrG,YADgC;AAEhCrE,WAFgC;AAGhCtE,mBAHgC;AAIhCC,aAAKmB,SAASnB;AAJkB,OAA5B+O,CAANpP;AAMF;;AAEA,wBACKwB,QADL;AAEEnB,WACEoE,QAAQa,cAARb,IAA0BA,QAAQa,cAARb,KAA2B,SAArDA,GACK,GAAEjD,SAASnB,GAAI,oBAAmBoE,QAAQa,cAAe,EAD9Db,GAEIjD,SAASnB;AALjB;AAOF,G;;kBA5NsBgP,Y;;;;;;iCA8NtBzP,WAAqC,EAAE8E,GAAF,EAAO6B,SAAP,EAAkBC,aAAlB,EAAiC/B,OAAjC,EAArC7E,EAAiF;AAC/EyH,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,8BAAnBA;AACAvG,QAAIsE,WAAW,6CAAftE;;AAEAsE,aAASC,MAATD,CAAgB,SAAhBA,EAA2BtD,KAAKkG,SAALlG,CAAe4C,GAAf5C,CAA3BsD;AACAA,aAASC,MAATD,CAAgB,WAAhBA,EAA6BkK,YAAY/I,SAAZ+I,CAA7BlK,EAAqD,WAArDA;AACAA,aAASC,MAATD,CAAgB,eAAhBA,EAAiCkK,YAAY9I,aAAZ8I,CAAjClK,EAA6D,eAA7DA;AACAA,aAASC,MAATD,CAAgB,SAAhBA,EAA2BtD,KAAKkG,SAALlG,CAAe2C,OAAf3C,CAA3BsD;AACAtE,QAAIU,WAAWxB,MAAMwF,8BAAIC,eAAJD,CAAoB,SAApBA,EAA+B,IAA/BA,EAAqC,KAArCA,EAA4C,IAA5CA,EAAkD;AACrEJ;AADqE,KAAlDI,CAArB1E;AAGA,WAAOU,QAAP;AACF,G;;kBAZeyL,qB;;;;;;iCAcfrN,WAA2CQ,WAA3CR,EAAwD;AACtDgB,4BAAwBR,WAAxBQ;;AAEA;AACAE,QAAIyO,eAAevP,MAAMC,8CAAgBC,qBAAhBD,CAAsCG,WAAtCH,CAAzBa;AACA,QAAI,CAACyO,aAAazP,YAAlB,EAAgC;AAC9BmC,8CAAasC,UAAbtC,CACE7B,WADF6B,EAEE,MAFFA,EAGE,uDAHFA;AAKAjC,YAAMwP,4BAA4BpP,WAA5BoP,EAAyC,EAAEC,OAAO,IAAT,EAAzCD,CAANxP;AACF;AACF,G;;kBAbe8F,2B;;;;;;iCAeflG,WAAyCQ,WAAzCR,EAAsD6E,OAAtD7E,EAA+D;AAC7DkB,QAAI4O,SAASC,8BAAIC,MAAJD,GAAazE,IAAbyE,CAAkB;AAC7BrK,sBAAgBqK,8BAAIE,MAAJF;AADa,KAAlBA,CAAb7O;;AAIA;AACA,QAAI;AACFd,YAAM8P,iBAAiBrL,OAAjBqL,EAA0BJ,MAA1BI,CAAN9P;AACAyE,cAAQa,cAARb,GAAyBA,QAAQa,cAARb,IAA0B,SAAnDA,CAFE,CAE0D;AAC9D,KAHA,CAGE,OAAOzC,CAAP,EAAU;AACV,YAAM,4CAAatB,0CAAUqP,eAAvB,EAAwC/N,EAAEgO,QAAFhO,EAAxC,CAAN;AACF;;AAEA;AACAlB,QAAI,EAAE4D,GAAF,EAAOC,GAAP,KAAe3E,MAAMiC,wCAAa2C,mBAAb3C,CAAiC7B,WAAjC6B,CAAzBnB;AACA,QAAI,CAAC4D,GAAD,IAAQ,CAACC,GAAb,EAAkB;AAChB,YAAME,aAAa7E,MAAMiC,wCAAa6C,mBAAb7C,CAAiC7B,WAAjC6B,CAAzB;AACA,YAAM,4CACJvB,0CAAUqE,eADN,EAEH,iBAAgBF,UAAW,uBAAsBzE,WAAY,EAF1D,CAAN;AAIF;;AAEA;AACA;AACA,QAAI,CAACsE,IAAIuL,OAAL,IAAgBtL,IAAIsL,OAAxB,EAAiC;AAC/BvL,UAAIuL,OAAJvL,GAAcC,IAAIsL,OAAlBvL;AACF;;AAEA,QAAI,CAACA,IAAIM,IAAL,IAAaL,IAAIM,IAArB,EAA2B;AACzBP,UAAIM,IAAJN,GAAWC,IAAIM,IAAfP;AACF;;AAEA,QAAIA,IAAIlC,OAAJkC,IAAeA,IAAIlC,OAAJkC,CAAYgI,MAA/B,EAAuC;AACrC,aAAOhI,IAAIlC,OAAJkC,CAAYgI,MAAnB;AACF;;AAEA,QAAIhI,IAAI4I,GAAJ5I,IAAWA,IAAI4I,GAAJ5I,CAAQgI,MAAvB,EAA+B;AAC7B,aAAOhI,IAAI4I,GAAJ5I,CAAQgI,MAAf;AACF;;AAEA;AACA,QAAIhI,IAAIrB,UAAJqB,KAAmB,aAAnBA,IAAoC,CAACwL,QAAQC,GAARD,CAAY,qCAAZA,CAAzC,EAA6F;AAC3F,YAAM,4CAAaxP,0CAAUqP,eAAvB,EAAwC,6CAAxC,CAAN;AACF;AACArL,QAAI0L,OAAJ1L,GAAc1E,MAAM0N,0CAAc2C,uBAAd3C,CAAsChJ,GAAtCgJ,CAApBhJ;AACA,WAAOA,GAAP;AACF,G;;kBA/Ce+C,yB;;;;;AAiDf;;;;iCACA7H,WAAyCQ,WAAzCR,EAAsD0Q,IAAtD1Q,EAAqE;AACnEkB,QAAIyP,aAAavQ,MAAMwQ,sBAAIC,wBAAJD,CAA6BpQ,WAA7BoQ,CAAvB1P;AACAA,QAAI4P,aAAa1Q,MAAMM,gCAASqQ,wBAATrQ,CAAkCF,WAAlCE,EAA+CiQ,UAA/CjQ,EAA2D,IAA3DA,EAAiEgQ,IAAjEhQ,CAAvBQ;;AAEAuG,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,qBAAnBA;AACAvG,QAAIyF,YAAYvG,MAAMsC,qBAAqBlC,WAArBkC,EAAkCoO,UAAlCpO,EAA8C,KAA9CA,EAAqD;AACzElB,iBAAWV,0CAAUkQ,cADoD;AAEzEvP,iBAAWwP;AAF8D,KAArDvO,CAAtBxB;;AAKAuG,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,yBAAnBA;AACAvG,QAAI0F,gBAAgBxG,MAAMsC,qBAAqBlC,WAArBkC,EAAkCoO,UAAlCpO,EAA8C,SAA9CA,EAAyD;AACjFlB,iBAAWV,0CAAUkQ,cAD4D;AAEjFvP,iBAAWwP;AAFsE,KAAzDvO,CAA1BxB;;AAKA,WAAO,EAAEyF,SAAF,EAAaC,aAAb,EAAP;AACF,G;;kBAjBeC,yB;;;;;AAmBf;AACA;AACA;AACA;AACA;;;;iCACA7G,WAA0CQ,WAA1CR,EAAuD8E,GAAvD9E,EAA4D6E,UAAU,EAAtE7E,EAA0E;AACxE,QAAI,CAAC6E,QAAQiF,KAAb,EAAoB;AAClB,aAAO,EAAEH,cAAc,IAAhB,EAAsBC,kBAAkB,IAAxC,EAAP;AACF;;AAEA1I,QAAIyP,aAAavQ,MAAMwQ,sBAAIC,wBAAJD,CAA6BpQ,WAA7BoQ,CAAvB1P;AACAA,QAAIgQ,eAAe9Q,MAAMM,gCAASyQ,0BAATzQ,CAAoCF,WAApCE,EAAiDiQ,UAAjDjQ,CAAzBQ;;AAEAuG,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,qBAAnBA;AACAvG,QAAIyI,eAAevJ,MAAMsC,qBAAqBlC,WAArBkC,EAAkCwO,YAAlCxO,EAAgD,KAAhDA,EAAuD;AAC9ElB,iBAAWV,0CAAUkQ,cADyD;AAE9EvP,iBAAWwP;AAFmE,KAAvDvO,CAAzBxB;;AAKAA,QAAI0I,mBAAmBxJ,MAAMsC,qBAAqBlC,WAArBkC,EAAkCwO,YAAlCxO,EAAgD,SAAhDA,EAA2D;AACtFlB,iBAAWV,0CAAUkQ,cADiE;AAEtFvP,iBAAWwP;AAF2E,KAA3DvO,CAA7BxB;;AAKA,WAAO,EAAEyI,YAAF,EAAgBC,gBAAhB,EAAP;AACF,G;;kBApBeC,0B;;;;;AAsBf;;;;;;;;;;;;iCASA7J,WAA8BQ,WAA9BR,EAA2C8E,GAA3C9E,EAAgDoR,iBAAhDpR,EAAmE;AACjEkB,QAAIyP,aAAavQ,MAAMwQ,sBAAIC,wBAAJD,CAA6BpQ,WAA7BoQ,CAAvB1P;AACAA,QAAImQ,YAAYjR,MAAMM,gCAAS4Q,uBAAT5Q,CAAiCF,WAAjCE,EAA8CiQ,UAA9CjQ,CAAtBQ;;AAEAA,QAAIqQ,gBAAgBnR,MAAMsC,qBAAqBlC,WAArBkC,EAAkC2O,SAAlC3O,EAA6C,KAA7CA,EAAoD;AAC5ElB,iBAAWV,0CAAU0Q;AADuD,KAApD9O,CAA1BxB;;AAIAA,QAAIuQ,oBAAoBrR,MAAMsC,qBAAqBlC,WAArBkC,EAAkC2O,SAAlC3O,EAA6C,SAA7CA,EAAwD;AACpFlB,iBAAWV,0CAAU0Q;AAD+D,KAAxD9O,CAA9BxB;;AAIA;AACA;AACA,UAAMwQ,iBAAiB,EAAvB;AACAtR,UAAMwE,uBACJpE,WADIoE,EAEJE,GAFIF;AAAAA,qCAGJ5E,WAAM2L,SAAN3L,EAAmB;AACjB,cAAM2R,eAAe1O,cAAKC,OAALD,CAAazC,WAAbyC,EAA0B0I,SAA1B1I,CAArB;AACA,cAAMH,WAAW1C,MAAM2C,sCAAGC,QAAHD,CAAY4O,YAAZ5O,CAAvB;AACA,cAAMoF,OAAOyJ,yCAAO9O,QAAP8O,CAAb;AACAF,uBAAe5F,IAAf4F,CAAoB,EAAEzG,OAAO,CAAC0G,YAAD,CAAT,EAAyBzG,YAAY,CAAC/C,IAAD,CAArC,EAA6CA,IAA7C,EAApBuJ;AACA,eAAOjI,2CAAQ2H,iBAAR3H,EAA2BtB,IAA3BsB,CAAP;AACD,OATG7E;;AAAAA;AAAAA;AAAAA;AAAAA,UAUJ,IAVIA,CAANxE;;AAaA;AACA,UAAMyR,YAAY3P,KAAKC,KAALD,CAAWqP,aAAXrP,CAAlB;AACA,UAAM4P,gBAAgB5P,KAAKC,KAALD,CAAWuP,iBAAXvP,CAAtB;AACA,WAAO2P,UAAUE,MAAVF,CAAiBC,aAAjBD,EAAgCE,MAAhCF,CAAuCH,cAAvCG,CAAP;AACF,G;;kBAhCeG,c;;;;;AAkCf;;;;;;;;;iCAMAhS,WAAsCQ,WAAtCR,EAAmD8E,GAAnD9E,EAAwD8H,MAAxD9H,EAAgE;AAC9D;AACAI,UAAM+C,2BAA2B3C,WAA3B2C,EAAwC2B,GAAxC3B,CAAN/C;;AAEA;AACA;AACA;AACA;AACA,QAAI0E,IAAImN,mBAAR,EAA6B;AAC3B,YAAMC,eAAepN,IAAImN,mBAAJnN,CAAwBf,GAAxBe,CAA4B8G;AAAAA,eAAK3I,cAAKmD,IAALnD,CAAUzC,WAAVyC,EAAuB2I,CAAvB3I,CAAL2I;AAAAA,OAA5B9G,CAArB;AACA2C,0CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,mCAAnBA;AACAyK,mBAAa3N,OAAb2N,CAAqBtG;AAAAA,eAAKnE,oCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,OAAOmE,CAA1BnE,CAALmE;AAAAA,OAArBsG;AACA;AACA;AACA,YAAMC,gBAAgB,IAAIC,GAAJ,EAAtB;AACA,WAAK,MAAMlK,KAAX,IAAoBJ,MAApB,EAA4B;AAC1B,cAAM+E,OAAO3E,MAAM+C,KAAN/C,IAAeA,MAAM+C,KAAN/C,CAAY,CAAZA,CAA5B;AACA,cAAMmK,eACJnK,MAAMoK,gBAANpK,IAA0B2E,IAA1B3E,IAAkCgK,aAAaK,IAAbL,CAAkBtG;AAAAA,iBAAK4G,+CAAU3F,IAAV2F,EAAgB5G,CAAhB4G,CAAL5G;AAAAA,SAAlBsG,CADpC;AAEA7P,gDAAaoJ,QAAbpJ,CACE7B,WADF6B,EAEE,MAFFA,EAGG,GAAEgQ,eAAe,SAAfA,GAA2B,SAAU,UAASxF,IAAK,EAHxDxK;AAKA,YAAIgQ,YAAJ,EAAkB;AAChBnK,gBAAMgD,UAANhD,CAAiB3D,OAAjB2D,CAAyBC;AAAAA,mBACvBgK,cAAcM,GAAdN,CAAkB,WAAWhK,IAAX,IAAmBD,MAAMwK,IAANxK,GAAa,MAAMA,MAAMwK,IAAzBxK,GAAgC,EAAnD,CAAlBiK,CADuBhK;AAAAA,WAAzBD;AAGF;AACF;AACApD,UAAIqN,aAAJrN,GAAoB,CAAC,GAAGqN,aAAJ,CAApBrN;AACA,aAAOA,IAAImN,mBAAX;AACF;;AAEA,WAAOnN,GAAP;AACF,G;;kBAnCe6N,sB;;;;;;iCAqCf3S,WAA0CQ,WAA1CR,EAAuD8E,GAAvD9E,EAA4D;AAC1DyH,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,kBAAnBA;;AAEA,UAAMmL,eAAenJ,2CAAQoJ,QAARpJ,EAAkB,SAAlBA,CAArB;AACA,UAAM3B,SAAS1H,MAAM4R,eAAexR,WAAfwR,EAA4BlN,GAA5BkN,EAAiCY,YAAjCZ,CAArB;;AAEAvK,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,kBAAnBA;;AAEA,QAAIK,OAAOrF,MAAPqF,GAAgB,CAAhBA,IAAqBA,OAAO,CAAPA,EAAUoD,UAAnC,EAA+C;AAC7C9K,YAAM0S,kBAAkBtS,WAAlBsS,EAA+BhL,MAA/BgL,CAAN1S;AACF,KAFA,MAEO;AACLqH,0CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,EAAEiE,OAAO,IAAT,EAAnBjE,EAAoC,+BAApCA;AACF;;AAEA;AACArH,UAAMuS,uBAAuBnS,WAAvBmS,EAAoC7N,GAApC6N,EAAyC7K,MAAzC6K,CAANvS;;AAEA,WAAO0E,GAAP;AACF,G;;kBAlBesI,0B;;;;;;iCAoBfpN,WAAwCQ,WAAxCR,EAAqD8E,GAArD9E,EAA0D+S,SAA1D/S,EAAqEiG,SAArEjG,EAAgF;AAC9EyH,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,kBAAnBA;;AAEA,UAAMmL,eAAenJ,2CAAQsJ,SAARtJ,EAAmB,QAAnBA,CAArB;AACA,UAAM3B,SAAS1H,MAAM4R,eAAexR,WAAfwR,EAA4BlN,GAA5BkN,EAAiCY,YAAjCZ,CAArB;;AAEAvK,wCAAOC,MAAPD,CAAcE,IAAdF,CAAmB,eAAnBA;;AAEA,QAAIK,OAAOrF,MAAPqF,GAAgB,CAAhBA,IAAqBA,OAAO,CAAPA,EAAUoD,UAAnC,EAA+C;AAC7C9K,YAAM2L,gBAAgBvL,WAAhBuL,EAA6BjE,MAA7BiE,EAAqC9F,SAArC8F,CAAN3L;AACF,KAFA,MAEO;AACLqH,0CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,EAAEiE,OAAO,IAAT,EAAnBjE,EAAoC,+BAApCA;AACF;;AAEA;AACArH,UAAMuS,uBAAuBnS,WAAvBmS,EAAoC7N,GAApC6N,EAAyC7K,MAAzC6K,CAANvS;;AAEA,WAAO,EAAE0E,GAAF,EAAOgD,MAAP,EAAP;AACF,G;;kBAlBeC,wB;;;;;;iCAoBf/H,WAAyCQ,WAAzCR,EAAsDgT,OAAtDhT,EAA+DiT,YAA/DjT,EAA6EkT,QAA7ElT,EAAuF;AACrF,UAAMmT,cAAclQ,cAAKC,OAALD,CAAazC,WAAbyC,EAA0BgQ,YAA1BhQ,CAApB;AACA,QAAI,CAACF,sCAAGmB,UAAHnB,CAAcE,cAAKmQ,OAALnQ,CAAakQ,WAAblQ,CAAdF,CAAL,EAA+C;AAC7C,YAAMsQ,WAAWL,UACZ,uBAAsBG,WAAY,sCADtBH,GAEZ,sBAAqBA,OAAQ,KAAIG,WAAY,sCAFlD;AAGA1L,0CAAOC,MAAPD,CAAc6G,IAAd7G,CAAmB4L,QAAnB5L;AACF,KALA,MAKO;AACLrH,YAAM2C,sCAAGuQ,SAAHvQ,CAAaoQ,WAAbpQ,EAA0BmQ,QAA1BnQ,CAAN3C;AACF;AACF,G;;kBAVeoH,yB;;;;;;iCAYfxH,WAA+C;AAC7C8E,OAD6C;AAE7CtE,eAF6C;AAG7CmG,aAH6C;AAI7CC,iBAJ6C;AAK7C+C,gBAL6C;AAM7CC;AAN6C,GAA/C5J,EAOG;AACD,QAAI8E,IAAIlC,OAAJkC,IAAeA,IAAIlC,OAAJkC,CAAYmK,iBAA/B,EAAkD;AAChD7O,YAAMoH,0BACJhH,WADIgH,EAEJ,2BAFIA,EAGJ1C,IAAIlC,OAAJkC,CAAYmK,iBAHRzH,EAIJZ,aAJIY,CAANpH;AAMF;;AAEA,QAAI0E,IAAI4I,GAAJ5I,IAAWA,IAAI4I,GAAJ5I,CAAQmK,iBAAvB,EAA0C;AACxC7O,YAAMoH,0BACJhH,WADIgH,EAEJ,uBAFIA,EAGJ1C,IAAI4I,GAAJ5I,CAAQmK,iBAHJzH,EAIJb,SAJIa,CAANpH;AAMF;;AAEA,QAAI0E,IAAIlC,OAAJkC,IAAeA,IAAIlC,OAAJkC,CAAYyO,oBAA/B,EAAqD;AACnDnT,YAAMoH,0BACJhH,WADIgH,EAEJ,8BAFIA,EAGJ1C,IAAIlC,OAAJkC,CAAYyO,oBAHR/L,EAIJoC,gBAJIpC,CAANpH;AAMF;;AAEA,QAAI0E,IAAI4I,GAAJ5I,IAAWA,IAAI4I,GAAJ5I,CAAQyO,oBAAvB,EAA6C;AAC3CnT,YAAMoH,0BACJhH,WADIgH,EAEJ,0BAFIA,EAGJ1C,IAAI4I,GAAJ5I,CAAQyO,oBAHJ/L,EAIJmC,YAJInC,CAANpH;AAMF;AACF,G;;kBA3CeqN,+B;;;;;;iCA6CfzN,WAA2C,EAAEQ,WAAF,EAAe2I,IAAf,EAAqBrE,GAArB,EAA0BrE,GAA1B,EAA3CT,EAA4E;AAC1EkB,QAAIsS,kBAAmB,GAAErH,oCAAOsH,GAAPtH,CAAWuH,MAAO,MAAKvH,oCAAOsH,GAAPtH,CAAWwH,IAAK,EAAhEzS;AACA,QAAIiL,oCAAOsH,GAAPtH,CAAWhL,IAAf,EAAqB;AACnBqS,wBAAmB,GAAEA,eAAgB,IAAGrH,oCAAOsH,GAAPtH,CAAWhL,IAAK,EAAxDqS;AACF;AACAA,sBAAmB,GAAEA,eAAgB,KAAIrK,KAAKI,QAAS,IAAGzE,IAAIM,IAAK,SAAnEoO;;AAEA,QAAI1O,IAAI8O,MAAJ9O,CAAW+O,mBAAf,EAAoC;AAClC3S,UAAIyB,WAAWvC,MAAM0N,0CAAcC,gBAAdD,CAA+BrN,GAA/BqN,EAAoC;AACvD,gCAAwBhJ,IAAIrB,UAD2B;AAEvD,6BAAqB,SAFkC;AAGvDuK,gBAAQ;AAH+C,OAApCF,CAArB5M;AAKAyB,eAAS6G,SAAT7G,GAAqB6Q,eAArB7Q;AACAA,eAASc,UAATd,GAAsB,aAAtBA;AACAvC,YAAM2C,sCAAGuQ,SAAHvQ,CACJE,cAAKC,OAALD,CAAazC,WAAbyC,EAA0B6B,IAAI8O,MAAJ9O,CAAW+O,mBAArC5Q,CADIF,EAEJb,KAAKkG,SAALlG,CAAeS,QAAfT,CAFIa,CAAN3C;AAIF;;AAEA,QAAI0E,IAAI8O,MAAJ9O,CAAWgP,eAAf,EAAgC;AAC9B5S,UAAIyB,WAAWvC,MAAM0N,0CAAcC,gBAAdD,CAA+BrN,GAA/BqN,EAAoC;AACvD,gCAAwBhJ,IAAIrB,UAD2B;AAEvD,6BAAqB,KAFkC;AAGvDuK,gBAAQ;AAH+C,OAApCF,CAArB5M;AAKAyB,eAAS6G,SAAT7G,GAAqB6Q,eAArB7Q;AACAA,eAASc,UAATd,GAAsB,aAAtBA;AACAvC,YAAM2C,sCAAGuQ,SAAHvQ,CACJE,cAAKC,OAALD,CAAazC,WAAbyC,EAA0B6B,IAAI8O,MAAJ9O,CAAWgP,eAArC7Q,CADIF,EAEJb,KAAKkG,SAALlG,CAAeS,QAAfT,CAFIa,CAAN3C;AAIF;AACF,G;;kBAlCeoP,2B;;;;;AAoCf;;;;iCACAxP,WAAiCQ,WAAjCR,EAA8C8H,MAA9C9H,EAAsD;AACpD;AACA,UAAMgL,QAAQ,EAAd;AACAlD,WAAOvD,OAAPuD,CAAeI,iBAAS;AACtBA,YAAM+C,KAAN/C,CAAY3D,OAAZ2D,CAAoB,UAACjF,IAAD,EAAOuB,KAAP,EAAiB;AACnCwG,cAAM9C,MAAMgD,UAANhD,CAAiB1D,KAAjB0D,CAAN8C,IAAiC/H,IAAjC+H;AACD,OAFD9C;AAGD,KAJDJ;;AAMA;AACA,UAAMiM,QAAQ,CAAC3T,MAAMwF,8BAAIC,eAAJD,CAAoB,gBAApBA,EAAsC,EAAtCA,EAA0C,MAA1CA,EAAkD;AACrE0F,YAAMD,OAAOC,IAAPD,CAAYL,KAAZK;AAD+D,KAAlDzF,CAAP,EAEVoO,QAFJ;AAGA,UAAMC,UAAU5I,OAAOC,IAAPD,CAAYL,KAAZK,EAAmB3H,MAAnB2H,CAA0BG;AAAAA,aAAO,CAACuI,MAAMvI,GAANuI,EAAWG,MAAnB1I;AAAAA,KAA1BH,CAAhB;;AAEA,QAAI4I,QAAQxR,MAARwR,KAAmB,CAAvB,EAA0B;AACxBxM,0CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,EAAEiE,OAAO,IAAT,EAAnBjE,EAAqC,6BAArCA;AACF;;AAEA;AACArH,UAAMyD,QAAQC,GAARD,CACJuH,uCAAM6I,OAAN7I,EAAe,CAAfA,EAAkBrH,GAAlBqH;AAAAA,qCAAsBpL,WAAMsL,IAANtL,EAAc;AAClCkB,YAAIsE,WAAW,6CAAftE;AACA,aAAK,MAAMsK,GAAX,IAAkBF,IAAlB,EAAwB;AACtBjJ,kDAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,aAAY2I,MAAMQ,GAANR,CAAW,EAAnE3I;;AAEAnB,cAAIiT,eAAenJ,MAAMQ,GAANR,EAAWmE,OAAXnE,CAAmBxK,WAAnBwK,EAAgC,EAAhCA,CAAnB9J;AACAuG,8CAAOC,MAAPD,CAAcE,IAAdF,CAAmB,EAAEiE,OAAO,IAAT,EAAnBjE,EAAqC,aAAY0M,YAAa,EAA9D1M;;AAEAjC,mBAASC,MAATD,CAAgBgG,GAAhBhG,GAAqBpF,MAAMgU,mBAAmBpJ,MAAMQ,GAANR,CAAnBoJ,CAA3B5O,GAA2DwF,MAAMQ,GAANR,CAA3DxF;AACF;AACApF,cAAMwF,8BAAIC,eAAJD,CAAoB,cAApBA,EAAoC,EAApCA,EAAwC,KAAxCA,EAA+C,IAA/CA,EAAqD,EAAEJ,QAAF,EAArDI,CAANxF;AACD,OAXDgL;;AAAAA;AAAAA;AAAAA;AAAAA,SADIvH,CAANzD;AAcF,G;;kBAlCe0S,iB;;;;;;iCA4Cf9S,WAAkCiD,IAAlCjD,EAAwC;AACtC,QAAIqU,+DAAJ,EAAc;AACZ,aAAOtR,sCAAGuR,gBAAHvR,CAAoBE,IAApBF,CAAP;AACF,KAFA,MAEO;AACL,YAAMwR,OAAOnU,MAAM2C,sCAAGC,QAAHD,CAAYE,IAAZF,CAAnB;AACA,aAAO,IAAIyR,IAAJ,CAAS,CAACD,IAAD,CAAT,CAAP;AACF;AACF,G;;kBAPeH,kB;;;;;;iCASfpU,WACEQ,WADFR,EAEE6E,UASI,EAXN7E,EAYE;AACA,QAAI,CAAC6E,QAAQkB,SAAb,EAAwB;AACtB;AACA,YAAM,EAAEjB,GAAF,EAAOC,GAAP,KAAe3E,MAAMiC,wCAAa2C,mBAAb3C,CAAiC7B,WAAjC6B,CAA3B;AACA,YAAM4C,aAAa7E,MAAMiC,wCAAa6C,mBAAb7C,CAAiC7B,WAAjC6B,CAAzB;AACA,aAAO;AACLyC,WADK;AAELC,WAFK;AAGLE,oBAAY7E,MAAMiC,wCAAa6C,mBAAb7C,CAAiC7B,WAAjC6B,CAHb;AAILoS,sBAAcxP,eAAe,UAAfA,GAA4B,OAA5BA,GAAsC;AAJ/C,OAAP;AAMF,KAVA,MAUO;AACL;AACA,aAAO;AACLH,aAAK1E,MAAMsU,oCAAWC,WAAXD,CAAuB7P,QAAQkB,SAA/B2O,EAA0C7P,OAA1C6P,CADN;AAELzP,oBAAYJ,QAAQkB,SAFf;AAGL0O,sBAAc,EAHT;AAIL1P,aAAK;AAJA,OAAP;AAMF;AACF,G;;kBAhCe6P,c;;;;;;iCAkCR5U,WACLQ,WADKR,EAEL6E,UAUI,EAZC7E,EAaL;AACAI,UAAMgJ,gCAAYC,mBAAZD,EAANhJ;AACAY,4BAAwBR,WAAxBQ;;AAEAgL,sCAAUC,QAAVD,CAAmB,iBAAnBA,EAAsC;AACpCxL,iBADoC;AAEpC0L,qBAAeC,oCAAOD,aAFc;AAGpC3K,gBAAUsD,QAAQtD;AAHkB,KAAtCyK;;AAMA,UAAM8D,SAASC,8BAAIC,MAAJD,GAAazE,IAAbyE,CAAkB;AAC/B8E,eAAS9E,8BAAI+E,OAAJ/E,EADsB;AAE/BgF,YAAMhF,8BAAIE,MAAJF,EAFyB;AAG/BxO,gBAAUwO,8BAAIiF,GAAJjF,GAAUkF,KAAVlF,CAAgB,KAAhBA,EAAuB,SAAvBA,EAAkC,KAAlCA,CAHqB;AAI/BmF,cAAQnF,8BAAIoF,KAAJpF,EAJuB;AAK/B2C,YAAM3C,8BAAIiF,GAAJjF,GAAUkF,KAAVlF,CAAgB,SAAhBA,EAA2B,WAA3BA,EAAwC,QAAxCA,CALyB;AAM/BrK,sBAAgBqK,8BAAIE,MAAJF,GAAaqF,KAAbrF,CAAmB,oBAAnBA,CANe;AAO/BsF,wBAAkBtF,8BAAIE,MAAJF,GAAaqF,KAAbrF,CAAmB,4BAAnBA,CAPa;AAQ/BhK,iBAAWgK,8BAAIE,MAAJF,EARoB;AAS/BtM,kBAAYsM,8BAAI1M,MAAJ0M;AATmB,KAAlBA,CAAf;;AAYA,QAAI;AACF3P,YAAM8P,iBAAiBrL,OAAjBqL,EAA0BJ,MAA1BI,CAAN9P;AACF,KAFA,CAEE,OAAOgC,CAAP,EAAU;AACV,YAAM,4CAAatB,0CAAUqP,eAAvB,EAAwC/N,EAAEgO,QAAFhO,EAAxC,CAAN;AACF;;AAEA,UAAM,EAAE0C,GAAF,EAAOC,GAAP,EAAYE,UAAZ,EAAwBwP,YAAxB,KAAyCrU,MAAMwU,eAAepU,WAAfoU,EAA4B/P,OAA5B+P,CAArD;;AAEA,QAAI,CAAC9P,GAAD,IAAQ,CAACC,GAAb,EAAkB;AAChB,YAAM,4CACJjE,0CAAUqE,eADN,EAEH,iBAAgBF,UAAW,uBAAsBzE,WAAY,EAF1D,CAAN;AAIF;;AAEA;AACA;AACA,QAAI,CAACsE,IAAIuL,OAAL,IAAgBtL,IAAIsL,OAAxB,EAAiC;AAC/BvL,UAAIuL,OAAJvL,GAAcC,IAAIsL,OAAlBvL;AACF;AACA,QAAI,CAACA,IAAIM,IAAL,IAAaL,IAAIM,IAArB,EAA2B;AACzBP,UAAIM,IAAJN,GAAWC,IAAIM,IAAfP;AACF;;AAEA,QAAID,QAAQtD,QAARsD,KAAqB,KAArBA,IAA8BA,QAAQtD,QAARsD,KAAqB,KAAvD,EAA8D;AAC5D,UAAI,CAACC,IAAI4I,GAAL,IAAY,CAAC5I,IAAI4I,GAAJ5I,CAAQuQ,gBAAzB,EAA2C;AACzC,cAAM,4CACJvU,0CAAUwE,gBADN,EAEH,6EAAD,GACG,yBAAwBL,UAAW,QAAOwP,YAAa,uBAHtD,CAAN;AAKF;AACF;;AAEA,QAAI5P,QAAQtD,QAARsD,KAAqB,SAArBA,IAAkCA,QAAQtD,QAARsD,KAAqB,KAA3D,EAAkE;AAChE,UAAI,CAACC,IAAIlC,OAAL,IAAgB,CAACkC,IAAIlC,OAAJkC,CAAYwQ,OAAjC,EAA0C;AACxC,cAAM,4CACJxU,0CAAUwE,gBADN,EAEH,4EAAD,GACG,yBAAwBL,UAAW,QAAOwP,YAAa,kBAHtD,CAAN;AAKF;AACF;;AAEA,WAAOrU,MAAMwF,8BAAIC,eAAJD,CAAoB,OAApBA,EAA6B,EAA7BA,EAAiC,KAAjCA,EAAwC;AACnDjD,gBAAUmC,GADyC;AAEnDD;AAFmD,KAAxCe,CAAb;AAIF,G;;kBAnFsB2P,U;;;;;;iCAqFtBvV,WAAoCS,GAApCT,EAAyC;AACvC,QAAI;AACFkB,UAAIU,WAAWxB,MAAMyB,QAAQpB,GAARoB,CAArBX;AACA;AACA;AACA;AACA,UACEU,SAASI,UAATJ,IAAuB,GAAvBA,IACAA,SAASI,UAATJ,GAAsB,GADtBA,IAEAA,SAASK,IAFTL,IAGAA,SAASK,IAATL,CAAc4T,QAAd5T,CAAuB,yBAAvBA,CAJF,EAKE;AACA,eAAO,IAAP;AACF;AACF,KAbA,CAaE,OAAOQ,CAAP,EAAU;AACV;AACF;;AAEAhC,UAAMqV,iDAAW,GAAXA,CAANrV;AACA,WAAOsV,qBAAqBjV,GAArBiV,CAAP;AACF,G;;kBApBeA,oB;;;;;;iCAoIR1V,WACLQ,WADKR,EAEL6E,UAAkB,EAFb7E,EAGL2V,UAAmB,IAHd3V,EAIL;AACAgB,4BAAwBR,WAAxBQ;AACAZ,UAAMwV,2BAA2BpV,WAA3BoV,CAANxV;AACAA,UAAMyV,gCAASC,cAATD,EAANzV,CAHA,CAG+B;AAC/BA,UAAMyV,gCAASE,yBAATF,CAAmCrV,WAAnCqV,CAANzV;;AAEAc,QAAI,EAAE4D,GAAF,KAAU1E,MAAMiC,wCAAa2C,mBAAb3C,CAAiC7B,WAAjC6B,CAApBnB;;AAEAA,QAAIhB,eAAeE,MAAMkB,kBAAkB,KAAlBA,CAAzBJ,CARA,CAQiD;AACjDA,QAAI8U,kBAAkBlR,IAAIkR,eAAJlR,GAClB7B,cAAKmD,IAALnD,CAAUA,cAAKC,OAALD,CAAazC,WAAbyC,EAA0B6B,IAAIkR,eAA9B/S,CAAVA,EAA0D,cAA1DA,CADkB6B,GAElB7B,cAAKmD,IAALnD,CAAUzC,WAAVyC,EAAuB,cAAvBA,CAFJ/B;AAGAA,QAAIqF,eAAe;AACjBpF,YAAMjB,YADW;AAEjB+V,6BAAuBhT,cAAKmD,IAALnD,CAAU+S,eAAV/S,EAA2B,MAA3BA,EAAmC,OAAnCA,EAA4C,aAA5CA,CAFN;AAGjBiT,iBAAW,CAAC,KAAD,CAHM;AAIjBC,qBAAe,CAAC,CAACtR,QAAQsR;AAJR,KAAnBjV;;AAOA,QAAI2D,QAAQuR,UAAZ,EAAwB;AACtB7P,mBAAa,aAAbA,IAA8B1B,QAAQuR,UAAtC7P;AACF;;AAEA,QAAI,CAAC8P,gCAASC,aAATD,CAAuBvR,GAAvBuR,EAA4B,QAA5BA,CAAL,EAA4C;AAC1C,aAAO9P,aAAa0P,qBAApB;AACF;AACA,UAAMM,mBAAmBzR,IAAIyB,YAA7B;AACA,QAAIgQ,gBAAJ,EAAsB;AACpB;AACA;AACA;AACA,UAAIA,iBAAiBzJ,MAArB,EAA6B;AAC3ByJ,yBAAiBzJ,MAAjByJ,GAA0BtT,cAAKC,OAALD,CAAazC,WAAbyC,EAA0BsT,iBAAiBzJ,MAA3C7J,CAA1BsT;AACF;;AAEAhQ,kCACKA,YADLA,EAEKgQ,gBAFLhQ,EAGMgQ,iBAAiBL,SAAjBK,GACA;AACEL,mBAAWM,qCAAK,CAAC,GAAGjQ,aAAa2P,SAAjB,EAA4B,GAAGK,iBAAiBL,SAAhD,CAALM;AADb,OADAD,GAIA,EAPNhQ;;AAUA,UAAIgQ,iBAAiBpV,IAAjBoV,KAA0BhU,SAA1BgU,IAAuCA,iBAAiBpV,IAAjBoV,KAA0B,IAArE,EAA2E;AACzErW,uBAAeqW,iBAAiBpV,IAAhCjB;AACF;AACF;AACAgB,QAAIuV,UAAUC,yCACZnQ,YADYmQ,EAEZ,UAAChG,IAAD,EAAOiG,GAAP,EAAYnL,GAAZ,EAAoB;AAClB;AACA;AACA,UAAImL,OAAO,OAAOA,GAAP,KAAe,SAA1B,EAAqC;AACnCjG,aAAK5E,IAAL4E,CAAW,KAAIlF,GAAI,EAAnBkF;AACF,OAFA,MAEO,IAAIiG,GAAJ,EAAS;AACdjG,aAAK5E,IAAL4E,CAAW,KAAIlF,GAAI,EAAnBkF,EAAsBiG,GAAtBjG;AACF;AACA,aAAOA,IAAP;AACD,KAXWgG,EAYZ,CAAC,OAAD,CAZYA,CAAdxV;AAcA,QAAI2D,QAAQgL,KAAZ,EAAmB;AACjB4G,cAAQ3K,IAAR2K,CAAa,eAAbA;AACF,KAjEA,CAiEA;AACAvV,QAAI0V,iBAAiB3T,cAAKmD,IAALnD,CACnBzC,WADmByC,EAEnB,cAFmBA,EAGnB,cAHmBA,EAInB,WAJmBA,EAKnB,QALmBA,CAArB/B;AAOA,UAAM2V,UAAU/R,IAAIgS,SAAJhS,IAAiB8R,cAAjC;AACA1V,QAAI6V,QAAJ7V;AACA;AACA;AACA,QAAI4D,IAAIgS,SAAR,EAAmB;AACjBC,iBAAWC,wBAAwBxW,WAAxBwW,CAAXD;AACF,KAFA,MAEO;AACLA,iBAAW,IAAXA;AACF;AACA;AACA;AACA;AACA;AACA7V,QAAI+V,kBAAkBC,uBAAcC,IAAdD,CAAmBL,OAAnBK,EAA4BT,OAA5BS,EAAqC;AACzDE,WAAK5W,WADoD;AAEzD+P,wBACKD,QAAQC,GADbA;AAEE8G,+BAAuB7W,WAFzB+P;AAGE+G,mBAAWP,QAHbxG;AAIEgH,8BAAsB;AAJxBhH,QAFyD;AAQzDiH,cAAQ;AARiD,KAArCN,CAAtBhW;AAUAd,UAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkD;AACtDH,kBADsD;AAEtDwX,mBAAaT,gBAAgBU;AAFyB,KAAlDtX,CAAND,CAhGA,CAmGE;AACFkQ,YAAQsH,EAARtH,CAAW,MAAXA,EAAmB,YAAM;AACvBuH,mDAASZ,gBAAgBU,GAAzBE;AACD,KAFDvH;AAGA2G,oBAAgBa,MAAhBb,CAAuBc,WAAvBd,CAAmC,MAAnCA;AACAA,oBAAgBe,MAAhBf,CAAuBc,WAAvBd,CAAmC,MAAnCA;AACAA,oBAAgBa,MAAhBb,CAAuBgB,IAAvBhB,CAA4BiB,wCAA5BjB,EAAqCW,EAArCX,CAAwC,MAAxCA,EAAgD1C,gBAAQ;AACtD,UAAIoB,OAAJ,EAAa;AACXwC,2BAAmB3X,WAAnB2X,EAAgC,MAAhCA,EAAwC5D,IAAxC4D;AACF;AACD,KAJDlB;AAKAA,oBAAgBe,MAAhBf,CAAuBW,EAAvBX,CAA0B,MAA1BA,EAAkC1C,gBAAQ;AACxC,UAAIoB,OAAJ,EAAa;AACXwC,2BAAmB3X,WAAnB2X,EAAgC,OAAhCA,EAAyC5D,IAAzC4D;AACF;AACD,KAJDlB;AAKA/V,QAAIkX,cAAc,IAAIvU,OAAJ,CAAY,UAACX,OAAD,EAAUmV,MAAV,EAAqB;AACjDpB,sBAAgBqB,IAAhBrB,CAAqB,MAArBA;AAAAA,uCAA6BjX,WAAMuY,IAANvY,EAAc;AACzCqC,kDAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,0CAAyCkW,IAAK,EAA1FlW;AACAgW,iBAAO,IAAIjU,KAAJ,CAAW,0CAAyCmU,IAAK,EAAzD,CAAPF;AACA,cAAI;AACFjY,kBAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkD;AACtDH,4BAAc,IADwC;AAEtDwX,2BAAa;AAFyC,aAAlDrX,CAAND;AAIF,WALA,CAKE,OAAOgC,CAAP,EAAU,CAAC;AACd,SATD6U;;AAAAA;AAAAA;AAAAA;AAAAA;AAUD,KAXiB,CAAlB/V;AAYAA,QAAIsX,cAAcpY,MAAMM,gCAAS+X,uBAAT/X,CAAiCF,WAAjCE,EAA8C;AACpEgY,eAAS,MAD2D;AAEpEC,gBAAU;AAF0D,KAA9CjY,CAAxBQ;AAIA,UAAM0X,YAAa,GAAEJ,WAAY,SAAjC;AACA,UAAMK,iBAAiB,IAAIhV,OAAJ,CAAY,UAACX,OAAD,EAAUmV,MAAV;AAAA,aACjCS,WACE;AAAA,eACET,OACE,IAAIjU,KAAJ,CACG,uCAAsCwU,SAAU,uDADnD,CADFP,CADF;AAAA,OADFS,EAOEC,yBAPFD,CADiC;AAAA,KAAZ,CAAvB;AAWA1Y,UAAMyD,QAAQmV,IAARnV,CAAa,CAAC6R,qBAAqBkD,SAArBlD,CAAD,EAAkC0C,WAAlC,EAA+CS,cAA/C,CAAbhV,CAANzD;AACF,G;;kBApJsBwP,2B;;;;;AAsJtB;AACA;AACA;;;;iCAcO5P,WAA0CQ,WAA1CR,EAA+D;AACpEgB,4BAAwBR,WAAxBQ;AACAE,QAAIyO,eAAevP,MAAMC,8CAAgBC,qBAAhBD,CAAsCG,WAAtCH,CAAzBa;AACA,QAAI,CAACyO,aAAazP,YAAd,IAA8B,CAACyP,aAAa+H,WAAhD,EAA6D;AAC3DrV,8CAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,oCAAmC7B,WAAY,GAA3F6B;AACA;AACF;AACAA,4CAAaoJ,QAAbpJ,CACE7B,WADF6B,EAEE,MAFFA,EAGG,kCAAiCsN,aAAa+H,WAAY,EAH7DrV;AAKA,QAAI;AACFjC,YAAM6Y,cAActJ,aAAa+H,WAA3BuB,EAAwC,SAAxCA,CAAN7Y;AACF,KAFA,CAEE,OAAOgC,CAAP,EAAU;AACVC,8CAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,oCAAmCD,EAAEgO,QAAFhO,EAAa,EAA5FC;AACF;AACAjC,UAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkD;AACtDH,oBAAc,IADwC;AAEtDwX,mBAAa;AAFyC,KAAlDrX,CAAND;AAIF,G;;kBArBsBwV,0B;;;;;;iCAsCf5V,WAAoCQ,WAApCR,EAAyD;AAC9DgB,4BAAwBR,WAAxBQ;AACAZ,UAAM8Y,oBAAoB1Y,WAApB0Y,CAAN9Y;AACAc,QAAIiY,MAAMC,4CAAVlY;AACAiY,QAAIE,GAAJF,CACEG,4CAAWC,IAAXD,CAAgB;AACdE,aAAO;AADO,KAAhBF,CADFH;AAKAA,QAAIE,GAAJF,CACEG,4CAAWG,UAAXH,CAAsB;AACpBE,aAAO,MADa;AAEpBE,gBAAU;AAFU,KAAtBJ,CADFH;AAMA,QAAI,CAAC/Y,MAAMiM,4BAAOC,wBAAPD,CAAgC7L,WAAhC6L,CAAP,MAAyDA,4BAAOG,KAApE,EAA2E;AACzE,YAAM,IAAIpI,KAAJ,CAAW,wEAAX,CAAN;AACF,KAjB8D,CAiB9D;AACAlD,QAAIyY;AAAAA,qCAAkB3Z,WAAO4Z,GAAP5Z,EAAY6Z,GAAZ7Z,EAAoB;AACxC,YAAI;AACF;AACA;AACA;AACAqM,sCAAOC,wBAAPD,CAAgC7L,WAAhC6L;AACAnL,cAAI,EAAE4D,KAAKnC,QAAP,KAAoBvC,MAAMiC,wCAAa2C,mBAAb3C,CAAiC7B,WAAjC6B,CAA9BnB;AACA,cAAI,CAACyB,QAAL,EAAe;AACb,kBAAMsC,aAAa7E,MAAMiC,wCAAa6C,mBAAb7C,CAAiC7B,WAAjC6B,CAAzB;AACA,kBAAM,IAAI+B,KAAJ,CAAW,MAAKa,UAAW,aAA3B,CAAN;AACF,WATE,CASF;AACA/D,cAAIqF,eAAenG,MAAMC,8CAAgByZ,oBAAhBzZ,CAAqCG,WAArCH,CAAzBa;AACAA,cAAI6Y,wBAAwB7X,KAAKC,KAALD,CAAWA,KAAKkG,SAALlG,CAAeqE,YAAfrE,CAAXA,CAA5BhB;AACA6Y,gCAAsBrB,OAAtBqB,GAAgC,MAAhCA;AACA,cAAIA,sBAAsBpB,QAAtBoB,KAAmC,UAAvC,EAAmD;AACjDA,kCAAsBpB,QAAtBoB,GAAiC,QAAjCA;AACF;AACApX,mBAASqX,GAATrX,GAAe,IAAfA,CAhBE,CAgBiB;AACnBA,mBAASsG,SAATtG,GAAqB;AACnBuG,kBAAMiD,oCAAOD,aADM;AAEnB1L;AAFmB,WAArBmC;AAIAA,mBAAS4D,YAAT5D,GAAwB4D,YAAxB5D;AACAA,mBAAS4N,GAAT5N,GAAe,EAAfA;AACA,eAAKzB,IAAIsK,GAAT,IAAgBH,OAAOC,IAAPD,CAAYiF,QAAQC,GAApBlF,CAAhB,EAA0C;AACxC,gBAAI4O,0CAA0CzO,GAA1CyO,CAAJ,EAAoD;AAClDtX,uBAAS4N,GAAT5N,CAAa6I,GAAb7I,IAAoB2N,QAAQC,GAARD,CAAY9E,GAAZ8E,CAApB3N;AACF;AACF;AACAzB,cAAIyP,aAAavQ,MAAMwQ,sBAAIC,wBAAJD,CAA6BpQ,WAA7BoQ,CAAvB1P;AACAA,cAAIK,WAAWqY,IAAI7X,OAAJ6X,CAAY,mBAAZA,KAAoC,KAAnD1Y;AACAyP,uBAAajQ,gCAASgB,4BAAThB,CAAsCiQ,UAAtCjQ,EAAkDa,QAAlDb,CAAbiQ;AACAzP,cAAIgZ,iBAAiBxZ,gCAASyZ,mBAATzZ,CAA6BiQ,UAA7BjQ,CAArBQ;AACAA,cAAIkZ,cAAcha,MAAMM,gCAAS2Z,+BAAT3Z,CACtBF,WADsBE,EAEtB6F,YAFsB7F,EAGtBkZ,IAAIU,QAHkB5Z,CAAxBQ;AAKAA,cAAI+B,OAAQ,IAAGsX,UAAUL,cAAVK,CAA0B,oBAAmBC,mBAC1DjZ,QAD0DiZ,CAE1D,IAAGJ,WAAY,EAFjBlZ;AAGAyB,mBAAS6G,SAAT7G,GACE,CAACvC,MAAMM,gCAAS+X,uBAAT/X,CAAiCF,WAAjCE,EAA8CqZ,qBAA9CrZ,EAAqEkZ,IAAIU,QAAzE5Z,CAAP,IACAuC,IAFFN;AAGAA,mBAAS8X,YAAT9X,GAAwBvC,MAAMM,gCAASga,0BAATha,CAAoCF,WAApCE,EAAiDkZ,IAAIU,QAArD5Z,CAA9BiC;AACAA,mBAASuX,cAATvX,GAA0BuX,cAA1BvX;AACAA,mBAASgY,MAAThY,GAAkBvC,MAAMM,gCAASka,oBAATla,CAA8BF,WAA9BE,EAA2CkZ,IAAIU,QAA/C5Z,CAAxBiC;AACAA,mBAASkY,OAATlY,GAAmBvC,MAAMM,gCAASoa,qBAATpa,CAA+BF,WAA/BE,EAA4CkZ,IAAIU,QAAhD5Z,CAAzBiC;AACAvC,gBAAMwE,uBACJpE,WADIoE,EAEJjC,QAFIiC;AAAAA,2CAGJ5E,WAAMiD,IAANjD;AAAAA,qBAAc2C,SAAS6G,SAAT7G,CAAmBsB,KAAnBtB,CAAyB,mBAAzBA,EAA8C,CAA9CA,IAAmD,SAAnDA,GAA+DM,IAA7EjD;AAAAA,aAHI4E;;AAAAA;AAAAA;AAAAA;AAAAA,eAANxE,CA/CE,CAmDD;AACDA,gBAAM+C,2BAA2B3C,WAA3B2C,EAAwCR,QAAxCQ,CAAN/C;AACA,gBAAM2a,WAAW3a,MAAM4a,gDAAaC,mBAAbD,EAAvB;AACA9Z,cAAIga,iBAAiB9a,MAAMgJ,gCAAY+R,eAAZ/R,EAA3BlI;AACA,cAAI,CAACga,cAAL,EAAqB;AACnBvY,qBAAS2G,EAAT3G,GAAe,IAAD,4CAAuB,IAAGA,SAASyC,IAAK,IAAG2V,QAAS,EAAlEpY;AACF;AACAzB,cAAIka,iBAAiBlZ,KAAKkG,SAALlG,CAAeS,QAAfT,CAArBhB;AACA,cAAI0Y,IAAI7X,OAAJ6X,CAAY,2BAAZA,CAAJ,EAA8C;AAC5C,gBAAIyB,sBAAsBD,cAAtBC,KAAyCD,cAA7C,EAA6D;AAC3DA,+BAAiBC,sBAAsBC,cAAvCF;AACF,aAFA,MAEO;AACL,kBAAI,CAACF,cAAL,EAAqB;AACnB,sBAAMK,mBAAmB;AACvBH,gCADuB;AAEvBI,6BAAW;AAFY,iBAAzB;AAIAH,sCAAsBD,cAAtBC,GAAuCD,cAAvCC;AACAD,iCAAiBlZ,KAAKkG,SAALlG,CAAeqZ,gBAAfrZ,CAAjBkZ;AACAC,sCAAsBC,cAAtBD,GAAuCD,cAAvCC;AACF,eARA,MAQO;AACLna,oBAAIua,cAAcrb,MAAMwQ,sBAAI8K,mBAAJ9K,CAAwBpQ,WAAxBoQ,CAAxB1P;AACAA,oBAAIoa,iBAAiBlb,MAAMwF,8BAAIC,eAAJD,CACzB,cADyBA,EAEzB,CAAC6V,YAAYE,IAAb,CAFyB/V,EAGzB,MAHyBA,EAIzBjD,QAJyBiD,CAA3B1E;AAMAma,sCAAsBD,cAAtBC,GAAuCD,cAAvCC;AACAA,sCAAsBC,cAAtBD,GAAuCC,eAAe1Z,QAAtDyZ;AACAD,iCAAiBE,eAAe1Z,QAAhCwZ;AACF;AACF;AACF;AACA,gBAAMQ,WAAW;AACfjI,kBAAMoH,QADS;AAEfc,oBAAQ,KAFO;AAGfC,2BAAeC,QAAQ,iBAARA,EAA2B1L,OAH3B;AAIf2L,0BAAc7P,oCAAOD,aAJN;AAKf+P,sBAAUC,YAAG3a,QAAH2a,EALK;AAMfC,6BAAiBD,YAAGE,OAAHF;AANF,WAAjB;AAQArC,cAAIpU,MAAJoU,CAAW,iBAAXA,EAA8B3X,KAAKkG,SAALlG,CAAe0Z,QAAf1Z,CAA9B2X;AACAA,cAAIwC,IAAJxC,CAASuB,cAATvB;AACA7N,4CAAUC,QAAVD,CAAmB,gBAAnBA,EAAqC;AACnCxL,uBADmC;AAEnC0L,2BAAeC,oCAAOD;AAFa,WAArCF;AAIF,SAnGA,CAmGE,OAAO5J,CAAP,EAAU;AACVC,kDAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,6BAA4BD,CAAE,IAAGA,EAAEmM,KAAM,EAArFlM;AACA;AACAwX,cAAIyC,MAAJzC,CAAW,GAAXA,EAAgBwC,IAAhBxC,CAAqB;AACnB5M,mBAAO7K,EAAEgO,QAAFhO;AADY,WAArByX;AAGF;AACD,OA3GGF;;AAAAA;AAAAA;AAAAA;AAAAA,QAAJzY;AA4GAiY,QAAIrX,GAAJqX,CAAQ,GAARA,EAAaQ,eAAbR;AACAA,QAAIrX,GAAJqX,CAAQ,WAARA,EAAqBQ,eAArBR;AACAA,QAAIrX,GAAJqX,CAAQ,YAARA,EAAsBQ,eAAtBR;AACAA,QAAIoD,IAAJpD,CAAS,OAATA;AAAAA,qCAAkBnZ,WAAO4Z,GAAP5Z,EAAY6Z,GAAZ7Z,EAAoB;AACpC,YAAI;AACFkB,cAAIsb,WAAW5C,IAAI9X,GAAJ8X,CAAQ,WAARA,CAAf1Y;AACAA,cAAIub,aAAa7C,IAAI9X,GAAJ8X,CAAQ,aAARA,CAAjB1Y;AACA,cAAIsb,YAAYC,UAAZD,IAA0B5C,IAAI3X,IAAlC,EAAwC;AACtCya,8BAAkBlc,WAAlBkc,EAA+BF,QAA/BE,EAAyCD,UAAzCC,EAAqD9C,IAAI3X,IAAzDya;AACF;AACF,SANA,CAME,OAAOta,CAAP,EAAU;AACVC,kDAAaC,QAAbD,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,8BAA6BD,CAAE,IAAGA,EAAEmM,KAAM,EAAtFlM;AACF;AACAwX,YAAIwC,IAAJxC,CAAS,SAATA;AACD,OAXDV;;AAAAA;AAAAA;AAAAA;AAAAA;AAYAA,QAAIoD,IAAJpD,CAAS,WAATA;AAAAA,qCAAsBnZ,WAAO4Z,GAAP5Z,EAAY6Z,GAAZ7Z,EAAoB;AACxC6b,eAAOc,KAAPd;AACAhC,YAAIwC,IAAJxC,CAAS,SAATA;AACD,OAHDV;;AAAAA;AAAAA;AAAAA;AAAAA;AAIAjY,QAAI0b,QAAQxc,MAAMiC,wCAAawa,cAAbxa,CAA4B7B,WAA5B6B,CAAlBnB;AACAA,QAAIf,iBAAiByc,MAAME,YAANF,GAAqBA,MAAME,YAA3BF,GAA0Cxc,MAAMkB,kBAAkB,KAAlBA,CAArEJ;AACAd,UAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkD;AACtDF;AADsD,KAAlDE,CAAND;AAGAc,QAAI2a,SAAS1C,IAAI4D,MAAJ5D,CAAWhZ,cAAXgZ,EAA2B,YAAM;AAC5CjY,UAAIyS,OAAOkI,OAAOmB,OAAPnB,GAAiBmB,OAA5B9b;AACAA,UAAIC,OAAO0a,OAAOmB,OAAPnB,GAAiB1a,IAA5BD;AACAmB,8CAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,oCAAmCsR,IAAK,IAAGxS,IAAK,EAA5FkB;AACD,KAJY8W,CAAbjY;AAKAd,UAAMwQ,sBAAIqM,sBAAJrM,CAA2BpQ,WAA3BoQ,CAANxQ;AACF,G;;kBA5JsB8c,oB;;;;;;iCA6Jfld,WAAmCQ,WAAnCR,EAAwD;AAC7DgB,4BAAwBR,WAAxBQ;AACAE,QAAIyO,eAAevP,MAAMC,8CAAgBC,qBAAhBD,CAAsCG,WAAtCH,CAAzBa;AACA,QAAIyO,gBAAgBA,aAAaxP,cAAjC,EAAiD;AAC/C,UAAI;AACFC,cAAMyB,QAAQ0a,IAAR1a,CAAc,oBAAmB8N,aAAaxP,cAAe,WAA7D0B,CAANzB;AACF,OAFA,CAEE,OAAOgC,CAAP,EAAU,CAAC;AACf;AACAhC,UAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkD;AACtDF,sBAAgB;AADsC,KAAlDE,CAAND;AAGF,G;;kBAXsB8Y,mB;;;;;;iCAYtBlZ,WACEQ,WADFR,EAEE2b,IAFF3b,EAGEmd,aAHFnd,EAIEod,QAJFpd,EAKEqd,WAAmB,CALrBrd,EAME;AACA,QAAI;AACFkB,UAAIoc,aAAara,cAAKmD,IAALnD,CAAU+X,gDAAauC,oBAAbvC,EAAV/X,EAA+C,WAA/CA,CAAjB/B;AACAA,UAAIoZ,WAAWla,MAAM+c,eAArBjc;AACAA,UAAIT,MAAML,MAAMod;AACdlD,gBADckD;AAEdF;AAFcE,SAGX7B,IAHW6B,EAAhBtc;AAKA,aAAOT,GAAP;AACF,KATA,CASE,OAAO2B,CAAP,EAAU;AACV;AACA,UAAIib,YAAY,CAAhB,EAAmB;AACjB,YAAIjb,EAAEI,OAAN,EAAe;AACb,gBAAM,4CAAa1B,0CAAU2c,WAAvB,EAAoCrb,EAAEgO,QAAFhO,EAApC,CAAN;AACF,SAFA,MAEO;AACL,gBAAM,4CAAatB,0CAAU2c,WAAvB,EAAoCvb,KAAKkG,SAALlG,CAAeE,CAAfF,CAApC,CAAN;AACF;AACF;AACA,UAAI,CAACmb,QAAL,EAAe;AACbA,mBAAW,CAAXA;AACF,OAXU,CAWV;AACA,UAAIjb,EAAEsb,UAAFtb,IAAgBA,EAAEsb,UAAFtb,KAAiB,GAArC,EAA0C;AACxC,YAAIib,aAAa,CAAjB,EAAoB;AAClB;AACA,cAAID,QAAJ,EAAc;AACZ,gBAAI;AACF9M,sBAAQqN,IAARrN,CAAa8M,QAAb9M,EAAuB,SAAvBA;AACF,aAFA,CAEE,OAAOlO,CAAP,EAAU;AACVC,sDAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,gCAA+B+a,QAAS,EAApF/a;AACF;AACF,WANA,MAMO;AACLjC,kBAAMwd,gBAANxd;AACF;AACF,SAXA,MAWO;AACL;AACAA,gBAAMwQ,sBAAIiN,2BAAJjN,CAAgCpQ,WAAhCoQ,CAANxQ;AACF;AACF,OA5BU,CA4BV;AACAA,YAAMqV,iDAAW,GAAXA,CAANrV;AACA,aAAO0d,qBAAqBtd,WAArBsd,EAAkCnC,IAAlCmC,EAAwCX,aAAxCW,EAAuD,IAAvDA,EAA6DT,WAAW,CAAxES,CAAP;AACF;AACF,G;;kBAhDeA,oB;;;;;;iCAkDR9d,WAAiCQ,WAAjCR,EAAsD;AAC3DkB,QAAIqI,WAAWnJ,MAAMgJ,gCAAY2U,uBAAZ3U,EAArBlI;AACA,QAAI,CAACqI,QAAL,EAAe;AACbA;AACF;AACAvI,4BAAwBR,WAAxBQ;AACAE,QAAIyO,eAAevP,MAAMC,8CAAgBC,qBAAhBD,CAAsCG,WAAtCH,CAAzBa;AACA,QAAI,CAACyO,aAAazP,YAAlB,EAAgC;AAC9B,YAAM,4CACJY,0CAAUkd,gBADN,EAEH,oCAAmCxd,WAAY,GAF5C,CAAN;AAIF;AACA,QAAI,CAACmP,aAAaxP,cAAlB,EAAkC;AAChC,YAAM,4CACJW,0CAAUmd,mBADN,EAEH,uCAAsCzd,WAAY,GAF/C,CAAN;AAIF;AACAJ,UAAM8d,iBAAiB1d,WAAjB0d,CAAN9d;AACA,QAAIA,MAAM+d,8BAAQC,oBAARD,CAA6B3d,WAA7B2d,CAAV,EAAqD;AACnD9b,8CAAagc,OAAbhc,CACE7B,WADF6B,EAEE,MAFFA,EAGE,6FAHFA;AAKF;AACAnB,QAAIod,mBAAmBrb,cAAKd,KAALc,CAAWzC,WAAXyC,EAAwBsb,IAA/Crd;AACAA,QAAI0b,QAAQxc,MAAMiC,wCAAawa,cAAbxa,CAA4B7B,WAA5B6B,CAAlBnB;;AAEAA,QAAIsd,6BAA6B,KAAjCtd;;AAEA;AACA;AACAd,UAAMyD,QAAQmV,IAARnV,CAAa,CACjB,kBAAC7D,aAAY;AACXI,YAAMqV,iDAAWgJ,cAAXhJ,CAANrV;AACA,UAAI,CAACoe,0BAAL,EAAiC;AAC/B,cAAM,IAAIpa,KAAJ,CAAU,4BAAV,CAAN;AACF;AACD,KALD,GADiB,EAOjB,kBAACpE,aAAY;AACXkB,UAAIwd,qBAAqBte,MAAM0d,qBAC7Btd,WAD6Bsd,EAE7B;AACEa,mBAAWxS,oCAAOyS,KAAPzS,CAAa0S,SAD1B;AAEE1d,cAAMwO,aAAaxP,cAFrB;AAGE2e,eAAO;AAHT,OAF6BhB,oBAO7B9d,aAAY;AACVkB,YAAI6d,aAAanC,MAAMoC,wBAANpC,GACbA,MAAMoC,wBADOpC,GAEbxc,MAAMwQ,sBAAIqO,yBAAJrO,CAA8BpQ,WAA9BoQ,CAFV1P;AAGA,eAAO,CACL6d,UADK,EAELre,gCAASwe,SAATxe,CAAmB6I,QAAnB7I,CAFK,EAGLA,gCAASwe,SAATxe,CAAmB4d,gBAAnB5d,CAHK,EAILyL,oCAAOyS,KAAPzS,CAAagT,MAJR,EAKL/Y,IALK,CAKA,GALA,CAAP;AAMD,OAjB4B0X,GAkB7BnO,aAAayN,QAlBgBU,CAA/B5c;AAoBAA,UAAIke,mBAAmBhf,MAAM0d,qBAC3Btd,WAD2Bsd,EAE3B;AACEa,mBAAWxS,oCAAOyS,KAAPzS,CAAa0S,SAD1B;AAEE1d,cAAMwO,aAAazP,YAFrB;AAGE4e,eAAO;AAHT,OAF2BhB,oBAO3B9d,aAAY;AACVkB,YAAI6d,aAAanC,MAAMoC,wBAANpC,GACbA,MAAMoC,wBADOpC,GAEbxc,MAAMwQ,sBAAIqO,yBAAJrO,CAA8BpQ,WAA9BoQ,CAFV1P;AAGA,eAAO,CACL,UADK,EAEL6d,UAFK,EAGLre,gCAASwe,SAATxe,CAAmB6I,QAAnB7I,CAHK,EAILA,gCAASwe,SAATxe,CAAmB4d,gBAAnB5d,CAJK,EAKLyL,oCAAOyS,KAAPzS,CAAagT,MALR,EAML/Y,IANK,CAMA,GANA,CAAP;AAOD,OAlB0B0X,GAmB3BnO,aAAayN,QAnBcU,CAA7B5c;AAqBAd,YAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkD;AACtDqe,0BADsD;AAEtDU,wBAFsD;AAGtDhC,kBAAUwB,kCAAMtO,OAANsO,GAAgBjH;AAH4B,OAAlDtX,CAAND;;AAMAoe,mCAA6B,IAA7BA;;AAEAnc,8CAAagd,YAAbhd,CACE7B,WADF6B,EAEE,MAFFA,EAGE;AACEid,aAAK,MADP;AAEEC,wBAAgB;AAFlB,OAHFld,EAOE,eAPFA;;AAUAuc,wCAAMY,WAANZ,CAAkB,cAAlBA,EAAkCtC,kBAAU;AAC1C,YAAIA,WAAW,cAAf,EAA+B;AAC7Bja,kDAAaC,QAAbD,CACE7B,WADF6B,EAEE,MAFFA,EAGE,8CACE,qEADF,GAEE,0EAFF,GAGE,wBANJA;AAQF,SATA,MASO,IAAIia,WAAW,QAAf,EAAyB;AAC9Bja,kDAAagc,OAAbhc,CAAqB7B,WAArB6B,EAAkC,MAAlCA,EAA0C,mBAA1CA;AACF;AACD,OAbDuc;AAcD,KA1ED,GAPiB,CAAb/a,CAANzD;AAmFF,G;;kBArHsBqf,iB;;;;;;iCAsHfzf,WAAgCQ,WAAhCR,EAAqD;AAC1DgB,4BAAwBR,WAAxBQ;AACA;AACA;AACA;AACAE,QAAIyO,eAAevP,MAAMC,8CAAgBC,qBAAhBD,CAAsCG,WAAtCH,CAAzBa;AACAA,QAAIwe,eAAed,kCAAMtO,OAANsO,EAAnB1d;AACAA,QAAIye,kBAAkBD,eAAeA,aAAa/H,GAA5B+H,GAAkC,IAAxDxe;AACA0d,sCAAMgB,kBAANhB,CAAyB,cAAzBA;AACA,QAAIjP,aAAayN,QAAbzN,IAAyBA,aAAayN,QAAbzN,KAA0BgQ,eAAvD,EAAwE;AACtE;AACA,UAAI;AACFrP,gBAAQqN,IAARrN,CAAaX,aAAayN,QAA1B9M;AACF,OAFA,CAEE,OAAOlO,CAAP,EAAU;AACVC,gDAAaoJ,QAAbpJ,CACE7B,WADF6B,EAEE,MAFFA,EAGG,gCAA+BsN,aAAayN,QAAS,EAHxD/a;AAKF;AACF,KAXA,MAWO;AACL;AACAjC,YAAMwd,gBAANxd;AACF;AACAA,UAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkD;AACtDqe,0BAAoB,IADkC;AAEtDU,wBAAkB,IAFoC;AAGtDhC,gBAAU;AAH4C,KAAlD/c,CAAND;AAKAA,UAAM+d,8BAAQ0B,mBAAR1B,CAA4B3d,WAA5B2d,CAAN/d;AACF,G;;kBA9BsB8d,gB;;;;;;iCAgCfle,WACLQ,WADKR,EAEL6E,OAFK7E,EAKL;AACAgB,4BAAwBR,WAAxBQ,EADA,CACoC;AACpCE,QAAI4O,SAASC,8BAAIC,MAAJD,GAAazE,IAAbyE,CAAkB;AAC7B7P,oBAAc6P,8BAAI+P,MAAJ/P,GAAagQ,OAAbhQ;AADe,KAAlBA,CAAb7O;AAGA,QAAI;AACFd,YAAM8P,iBAAiBrL,OAAjBqL,EAA0BJ,MAA1BI,CAAN9P;AACF,KAFA,CAEE,OAAOgC,CAAP,EAAU;AACV,YAAM,4CAAatB,0CAAUqP,eAAvB,EAAwC/N,EAAEgO,QAAFhO,EAAxC,CAAN;AACF;AACAhC,UAAMC,8CAAgBoX,oBAAhBpX,CAAqCG,WAArCH,EAAkDwE,OAAlDxE,CAAND;AACF,G;;kBAhBsB4f,e;;;;;;iCAiBfhgB,WAA2BQ,WAA3BR,EAAgD6E,UAAkB,EAAlE7E,EAAsE;AAC3EgB,4BAAwBR,WAAxBQ;AACA,WAAOZ,MAAMM,gCAASC,yBAATD,CAAmCF,WAAnCE,EAAgDmE,OAAhDnE,CAAb;AACF,G;;kBAHsBuf,W;;;;;;iCAKfjgB,WACLQ,WADKR,EAEL6E,UAAkB,EAFb7E,EAGL2V,UAAmB,IAHd3V,EAIS;AACdgB,4BAAwBR,WAAxBQ;AACAgL,sCAAUC,QAAVD,CAAmB,eAAnBA,EAAoC;AAClCxL,iBADkC;AAElC0L,qBAAeC,oCAAOD;AAFY,KAApCF;AAIA5L,UAAM8c,qBAAqB1c,WAArB0c,CAAN9c;AACAA,UAAMwP,4BAA4BpP,WAA5BoP,EAAyC/K,OAAzC+K,EAAkD+F,OAAlD/F,CAANxP;AACA,QAAI,CAAC+L,oCAAO+T,OAAZ,EAAqB;AACnB,UAAI;AACF9f,cAAMqf,kBAAkBjf,WAAlBif,CAANrf;AACF,OAFA,CAEE,OAAOgC,CAAP,EAAU;AACVC,gDAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,yBAAwBD,EAAEI,OAAQ,EAA9EH;AACF;AACF;AACAnB,QAAI,EAAE4D,GAAF,KAAU1E,MAAMiC,wCAAa2C,mBAAb3C,CAAiC7B,WAAjC6B,CAApBnB;AACAif,wCAAWC,YAAXD,CAAwB3f,WAAxB2f,EAAqCrb,GAArCqb;AACA,WAAOrb,GAAP;AACF,G;;kBAtBsBub,U;;;;;;iCAuBtBrgB,WAAkCQ,WAAlCR,EAAsE;AACpEmgB,wCAAWG,WAAXH;AACA/f,UAAM8Y,oBAAoB1Y,WAApB0Y,CAAN9Y;AACAA,UAAMwV,2BAA2BpV,WAA3BoV,CAANxV;AACA,QAAI,CAAC+L,oCAAO+T,OAAZ,EAAqB;AACnB,UAAI;AACF9f,cAAM8d,iBAAiB1d,WAAjB0d,CAAN9d;AACF,OAFA,CAEE,OAAOgC,CAAP,EAAU;AACVC,gDAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,MAAnCA,EAA4C,wBAAuBD,EAAEI,OAAQ,EAA7EH;AACF;AACF;AACF,G;;kBAXeke,kB;;;;;;iCAYRvgB,WAAyBC,UAAzBD,EAA4D;AACjE,UAAMoO,SAAShO,MAAMyD,QAAQmV,IAARnV,CAAa,CAChC0c,mBAAmBtgB,UAAnBsgB,CADgC,EAEhC,IAAI1c,OAAJ,CAAY,UAACX,OAAD,EAAUmV,MAAV;AAAA,aAAqBS,WAAW5V,OAAX4V,EAAoB,IAApBA,EAA0B,YAA1BA,CAArB;AAAA,KAAZ,CAFgC,CAAbjV,CAArB;AAIA,QAAIuK,WAAW,YAAf,EAA6B;AAC3B;AACA,YAAM,EAAEsJ,WAAF,EAAe0F,QAAf,KAA4Bhd,MAAMC,8CAAgBC,qBAAhBD,CAAsCJ,UAAtCI,CAAxC;AACA,UAAIqX,WAAJ,EAAiB;AACf,YAAI;AACFpH,kBAAQqN,IAARrN,CAAaoH,WAAbpH;AACF,SAFA,CAEE,OAAOlO,CAAP,EAAU,CAAC;AACf;AACA,UAAIgb,QAAJ,EAAc;AACZ,YAAI;AACF9M,kBAAQqN,IAARrN,CAAa8M,QAAb9M;AACF,SAFA,CAEE,OAAOlO,CAAP,EAAU,CAAC;AACf;AACAhC,YAAMC,8CAAgBoX,oBAAhBpX,CAAqCJ,UAArCI,EAAiD;AACrDF,wBAAgB,IADqC;AAErDD,sBAAc,IAFuC;AAGrDwX,qBAAa,IAHwC;AAIrDgH,4BAAoB,IAJiC;AAKrDU,0BAAkB,IALmC;AAMrDhC,kBAAU;AAN2C,OAAjD/c,CAAND;AAQF;AACF,G;;kBA3BsBogB,S;;;;;;;AA78DtB;AAAA;AAAA;;AACA;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AACA;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAE6C;;AAE7C,MAAM3N,WAAW,uCAAjB;AACA,MAAM5B,sBAAsB,GAA5B;AACA,MAAMwN,iBAAiB,KAAK,IAA5B;AACA,MAAM1F,4BAA4B,KAAK,IAAvC;;AAEA,MAAM7I,mBAAmBuQ,qCAAU1Q,8BAAI2Q,QAAdD,CAAzB;AACA,MAAMxH,gBAAgBwH,6EAAtB;AACA,MAAMjD,oBAAoBiD,qCAAU7B,kCAAM+B,OAAhBF,CAA1B;AACA,MAAM7C,iBAAiB6C,qCAAU7B,kCAAMjB,IAAhB8C,CAAvB;;AAEA,MAAM5e,UAAU+e,gEAAQC,QAARD,CAAiB;AAC/BE,2BAAyB;AADM,CAAjBF,CAAhB;;AASA1f,IAAIma,wBAA8C;AAChDD,kBAAgB,IADgC;AAEhDE,kBAAgB;AAFgC,CAAlDpa;;AAoJA,SAAS8L,mBAAT,CAA6B+T,UAA7B,EAAyCvgB,WAAzC,EAAsD;AACpD,MAAI;AACF,QAAIugB,WAAWC,OAAXD,CAAmB,GAAnBA,MAA4B,CAAhC,EAAmC;AACjC7f,UAAI+f,WAAWhe,cAAKC,OAALD,CAAazC,WAAbyC,EAA0B8d,UAA1B9d,CAAf/B;;AAEA;AACA;AACAggB,iDAAQD,QAARC;;AAEA;AACA,aAAOnF,QAAQkF,QAARlF,CAAP;AACF,KATA,MASO;AACL7a,UAAI+f,WAAWhe,cAAKC,OAALD,CAAazC,WAAbyC,EAA0B,cAA1BA,EAA0C8d,UAA1C9d,CAAf/B;;AAEA;AACA;AACAggB,iDAAQD,QAARC;;AAEA;AACA,aAAOnF,QAAQkF,QAARlF,CAAP;AACF;AACF,GApBA,CAoBE,OAAO3Z,CAAP,EAAU;AACV,WAAO,IAAP;AACF;AACF;;AAg1BA,SAASsN,WAAT,CAAqBO,MAArB,EAA6B;AAC3B,MAAIoE,+DAAJ,EAAc;AACZ,WAAOpE,MAAP;AACF,GAFA,MAEO;AACL,WAAO,IAAIuE,IAAJ,CAAS,CAACvE,MAAD,CAAT,CAAP;AACF;AACF;;AAwJA,SAASkR,uBAAT,CAAiCC,MAAjC,EAAiD;AAC/ClgB,MAAImgB,KAAK,gCAATngB;AACAA,MAAIogB,QAAQF,OAAOnd,KAAPmd,CAAaC,EAAbD,CAAZlgB;AACA,MAAIogB,SAASA,MAAM7e,MAAN6e,IAAgB,CAA7B,EAAgC;AAC9B,WAAQ,4BAA2BA,MAAM,CAANA,CAAS,IAA5C;AACF,GAFA,MAEO;AACL,WAAO,IAAP;AACF;AACF;;AAEA,SAASnJ,kBAAT,CAA4B3X,WAA5B,EAAiD+gB,KAAjD,EAAgEhN,IAAhE,EAA8E;AAC5ErT,MAAIkgB,SAAS7M,KAAKnE,QAALmE,EAAbrT;AACA,MAAI,CAACkgB,MAAL,EAAa;AACX;AACF;AACA;AACA;AACA,MAAII,mCAAmChhB,WAAnCghB,EAAgDD,KAAhDC,EAAuDJ,MAAvDI,CAAJ,EAAoE;AAClEnf,4CAAaoJ,QAAbpJ,CACE7B,WADF6B,EAEE,MAFFA,EAGG,wCAAuC+e,MAAO,EAHjD/e,EAIE,yCAJFA;AAMA;AACF;AACA,MAAI,qCAAqCof,IAArC,CAA0CL,MAA1C,CAAJ,EAAuD;AACrD/e,4CAAaoJ,QAAbpJ,CAAsB7B,WAAtB6B,EAAmC,OAAnCA,EAA4C+e,MAA5C/e;AACA;AACF;AACA,MAAIkf,UAAU,MAAd,EAAsB;AACpBlf,4CAAagc,OAAbhc,CAAqB7B,WAArB6B,EAAkC,OAAlCA,EAA2C+e,MAA3C/e;AACF,GAFA,MAEO;AACLA,4CAAaC,QAAbD,CAAsB7B,WAAtB6B,EAAmC,OAAnCA,EAA4C+e,MAA5C/e;AACF;AACF;;AAEA,SAASmf,kCAAT,CACEhhB,WADF,EAEE+gB,KAFF,EAGEH,MAHF,EAIW;AACT,MACEG,UAAU,OAAVA,IACA,CAACH,OAAOM,UAAPN,CAAkB,mDAAlBA,CAFH,EAGE;AACA,WAAO,KAAP;AACF;;AAEAlgB,MAAIygB,6BAA6B1e,cAAKmD,IAALnD,CAC/BzC,WAD+ByC,EAE/B,cAF+BA,EAG/B,cAH+BA,EAI/B,cAJ+BA,CAAjC/B;AAMAA,MAAI0gB,gCAAgCC,qDAAaF,0BAAbE,CAApC3gB;AACAA,MAAI4gB,uCAAuC,IAAIC,MAAJ,CACxC,UAASH,6BAA8B,oBAAmBA,6BAA8B,IADhD,CAA3C1gB;AAGA,SAAO4gB,qCAAqCL,IAArCK,CAA0CV,MAA1CU,CAAP;AACF;;AAEA,SAASE,iCAAT,CAA2C/f,IAA3C,EAAiD;AAC/C,SAAOA,KAAKQ,MAALR,KAAgB,CAAhBA,IAAqBA,KAAK,CAALA,MAAY,yBAAxC;AACF;;AAEA,SAASya,iBAAT,CAA2Blc,WAA3B,EAAgDgc,QAAhD,EAAkEC,UAAlE,EAAsFwF,IAAtF,EAAiG;AAC/F,OAAK/gB,IAAIghB,IAAI,CAAb,EAAgBA,IAAID,KAAKxf,MAAzB,EAAiCyf,GAAjC,EAAsC;AACpChhB,QAAIgN,MAAM+T,KAAKC,CAALD,CAAV/gB;AACAA,QAAIe,OAAO,OAAOiM,IAAIjM,IAAX,KAAoB,QAApB,GAA+B,CAACiM,IAAIjM,IAAL,CAA/B,GAA4CiM,IAAIjM,IAA3Df;AACAA,QAAI+O,SAAShO,KACV8B,GADU9B,CACNkgB,OAAO;AACV,UAAI,OAAOA,GAAP,KAAe,WAAnB,EAAgC;AAC9B,eAAO,WAAP;AACF;AACA,UAAIA,QAAQ,MAAZ,EAAoB;AAClB,eAAO,MAAP;AACF;AACA,UAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA1C,IAAsD,OAAOA,GAAP,KAAe,SAAzE,EAAoF;AAClF,eAAOA,GAAP;AACF;AACA,UAAI;AACF,eAAOjgB,KAAKkG,SAALlG,CAAeigB,GAAfjgB,CAAP;AACF,OAFA,CAEE,OAAOE,CAAP,EAAU;AACV,eAAO+f,IAAI/R,QAAJ+R,EAAP;AACF;AACD,KAhBUlgB,EAiBVmE,IAjBUnE,CAiBL,GAjBKA,CAAbf;AAkBAA,QAAIqgB,QAAQrT,IAAIqT,KAAhBrgB;AACA,QAAI8gB,kCAAkC/f,IAAlC+f,CAAJ,EAA6C;AAC3CT,cAAQ9Z,oCAAO2a,KAAfb;AACF;AACArgB,QAAImhB,aAAanU,IAAImU,UAArBnhB;AACAA,QAAIohB,aAAapU,IAAIoU,UAArBphB;AACAA,QAAIqhB,gBAAgBrU,IAAIqU,aAAxBrhB;AACAmB,4CAAagd,YAAbhd,CACE7B,WADF6B,EAEEkf,KAFFlf,EAGE;AACEid,WAAK,QADP;AAEE9C,cAFF;AAGEC,gBAHF;AAIE4F,gBAJF;AAKEC,gBALF;AAMEC;AANF,KAHFlgB,EAWE4N,MAXF5N;AAaF;AACF;AA0JA,SAAS2U,uBAAT,CAAiCxW,WAAjC,EAA8D;AAC5DU,MAAI8J,QAAQ,EAAZ9J;AACAA,MAAIshB,YAAYvf,cAAKC,OAALD,CAAazC,WAAbyC,CAAhB/B;AACA,SAAO,IAAP,EAAa;AACX8J,UAAMc,IAANd,CAAW/H,cAAKmD,IAALnD,CAAUuf,SAAVvf,EAAqB,cAArBA,CAAX+H;AACA9J,QAAIuhB,kBAAkBxf,cAAKmQ,OAALnQ,CAAauf,SAAbvf,CAAtB/B;AACA,QAAIshB,cAAcC,eAAlB,EAAmC;AACjC;AACF;AACAD,gBAAYC,eAAZD;AACF;AACA,SAAOxX,MAAM5E,IAAN4E,CAAW/H,cAAKyf,SAAhB1X,CAAP;AACF;;;AAwBA9J,IAAIyhB,kCAAkC,IAAIvQ,GAAJ,CAAQ,CAC5C,qBAD4C,EAE5C,2BAF4C,EAG5C,gCAH4C,EAI5C,4BAJ4C,EAK5C,4BAL4C,CAAR,CAAtClR;;AAQA,SAAS+Y,yCAAT,CAAmDzO,GAAnD,EAAwD;AACtD,MAAImX,gCAAgCC,GAAhCD,CAAoCnX,IAAIqX,WAAJrX,EAApCmX,CAAJ,EAA4D;AAC1D,WAAO,KAAP;AACF;AACA,SAAOnX,IAAIkW,UAAJlW,CAAe,eAAfA,KAAmCA,IAAIkW,UAAJlW,CAAe,OAAfA,CAA1C;AACF","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\nimport bodyParser from 'body-parser';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport promisify from 'util.promisify';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport Request from 'request-promise-native';\nimport spawnAsync from '@expo/spawn-async';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\nimport url from 'url';\nimport urljoin from 'url-join';\nimport uuid from 'uuid';\nimport readLastLines from 'read-last-lines';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport * as DevSession from './DevSession';\nimport ErrorCode from './ErrorCode';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport * as IosPlist from './detach/IosPlist';\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport { isNode } from './tools/EnvironmentHelper';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport StandaloneContext from './detach/StandaloneContext';\nimport * as ThirdParty from './ThirdParty';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\n\nimport type { User as ExpUser } from './User'; //eslint-disable-line\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\nconst WAIT_FOR_PACKAGER_TIMEOUT = 30 * 1000;\n\nconst joiValidateAsync = promisify(joi.validate);\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\nconst request = Request.defaults({\n  resolveWithFullResponse: true,\n});\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError(ErrorCode.NO_PROJECT_ROOT, 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response = await request.get({\n    url: fullUrl,\n    headers: {\n      'Exponent-Platform': platform,\n    },\n  });\n\n  if (response.statusCode !== 200) {\n    if (response.body) {\n      let body;\n      try {\n        body = JSON.parse(response.body);\n      } catch (e) {\n        ProjectUtils.logError(projectRoot, 'expo', response.body);\n      }\n\n      if (body !== undefined) {\n        if (body.message) {\n          ProjectUtils.logError(projectRoot, 'expo', body.message);\n        } else {\n          ProjectUtils.logError(projectRoot, 'expo', response.body);\n        }\n      }\n    }\n    throw new XDLError(\n      errorCode,\n      `Packager URL ${fullUrl} returned unexpected code ${response.statusCode}. ` +\n        'Please open your project in the Expo app and see if there are any errors. ' +\n        'Also scroll up and make sure there were no errors or warnings when opening your project.'\n    );\n  }\n\n  if (!response.body || (minLength && response.body.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.body}`);\n  }\n\n  return response.body;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot, manifest) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(\n      manifest.sdkVersion\n    )).filter(({ fieldPath }) => get(manifest, fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot) {\n  try {\n    if (modulePath.indexOf('.') === 0) {\n      let fullPath = path.resolve(projectRoot, modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    } else {\n      let fullPath = path.resolve(projectRoot, 'node_modules', modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {} = {}\n) {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // build the bundles\n  let packagerOpts = {};\n  if (options.isDev) {\n    packagerOpts = { dev: true, minify: true };\n  }\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await _writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await _writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const exp = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap = {};\n    assets.forEach(asset => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      'Must provide a slug field in the app.json manifest.'\n    );\n  }\n  const user = await UserManager.ensureLoggedInAsync();\n  exp.id = `@${user.username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', androidBundleUrl);\n  exp.platform = 'android';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', iosBundleUrl);\n  exp.platform = 'ios';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n      force: true,\n    });\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot, assets, outputDir) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus == Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      ErrorCode.PUBLISH_VALIDATION_ERROR,\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let exp = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file, config } = hook;\n      let fn = _requireFromProject(file, projectRoot);\n      if (fn === null) {\n        logger.global.error(`Unable to load postPublishHook: '${file}'`);\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        ErrorCode.HOOK_INITIALIZATION_ERROR,\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n      const context = StandaloneContext.createUserContext(projectRoot, exp);\n      const { supportingDirectory } = IosWorkspace.getPaths(context);\n      await IosPlist.modifyAsync(supportingDirectory, 'EXShell', shellPlist => {\n        shellPlist.releaseChannel = options.releaseChannel;\n        return shellPlist;\n      });\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = response.url.replace('exp://', 'https://');\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${options.releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('iosBundle', _createBlob(iosBundle), 'iosBundle');\n  formData.append('androidBundle', _createBlob(androidBundle), 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  try {\n    await joiValidateAsync(options, schema);\n    options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return exp;\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot, opts?: Object) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint, null, opts);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(projectRoot, exp, hostedAssetPrefix) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot, exp, assets) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add('asset_' + hash + (asset.type ? '.' + asset.type : ''))\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(projectRoot, exp, hostedUrl, outputDir) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, await _readFileForUpload(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nfunction _createBlob(string) {\n  if (isNode()) {\n    return string;\n  } else {\n    return new Blob([string]);\n  }\n}\n\nasync function _readFileForUpload(path) {\n  if (isNode()) {\n    return fs.createReadStream(path);\n  } else {\n    const data = await fs.readFile(path);\n    return new Blob([data]);\n  }\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n  } = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: await ProjectUtils.configFilenameAsync(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n    sdkVersion?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-\\.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  try {\n    await joiValidateAsync(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a bundle identifier in order to build this experience for iOS.` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a java package in order to build this experience for Android.` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n}\n\nasync function _waitForRunningAsync(url) {\n  try {\n    let response = await request(url);\n    // Looking for \"Cached Bundles\" string is hacky, but unfortunately\n    // ngrok returns a 200 when it succeeds but the port it's proxying\n    // isn't bound.\n    if (\n      response.statusCode >= 200 &&\n      response.statusCode < 300 &&\n      response.body &&\n      response.body.includes('packager-status:running')\n    ) {\n      return true;\n    }\n  } catch (e) {\n    // Try again after delay\n  }\n\n  await delayAsync(100);\n  return _waitForRunningAsync(url);\n}\n\nfunction _stripPackagerOutputBox(output: string) {\n  let re = /Running packager on port (\\d+)/;\n  let found = output.match(re);\n  if (found && found.length >= 2) {\n    return `Running packager on port ${found[1]}\\n`;\n  } else {\n    return null;\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n    let level = log.level;\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    let groupDepth = log.groupDepth;\n    let shouldHide = log.shouldHide;\n    let includesStack = log.includesStack;\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth,\n        shouldHide,\n        includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n  let nodeModulesPath = exp.nodeModulesPath\n    ? path.join(path.resolve(projectRoot, exp.nodeModulesPath), 'node_modules')\n    : path.join(projectRoot, 'node_modules');\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: path.join(nodeModulesPath, 'expo', 'tools', 'LogReporter'),\n    assetExts: ['ttf'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'local-cli',\n    'cli.js'\n  );\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      reject(new Error(`Metro Bundler process exited with code ${code}`));\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  const statusUrl = `${packagerUrl}/status`;\n  const timeoutPromise = new Promise((resolve, reject) =>\n    setTimeout(\n      () =>\n        reject(\n          new Error(\n            `Could not access packager status at ${statusUrl}. Are you sure the packager is running and reachable?`\n          )\n        ),\n      WAIT_FOR_PACKAGER_TIMEOUT\n    )\n  );\n  await Promise.race([_waitForRunningAsync(statusUrl), exitPromise, timeoutPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    bodyParser.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    bodyParser.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error in manifestHandler: ${e} ${e.stack}`);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\nexport async function stopExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await request.post(`http://localhost:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError(ErrorCode.NGROK_ERROR, e.toString());\n      } else {\n        throw new XDLError(ErrorCode.NGROK_ERROR, JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGER_PORT,\n      `No packager found for project at ${projectRoot}.`\n    );\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      ErrorCode.NO_EXPO_SERVER_PORT,\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', status => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\nexport async function stopTunnelsAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  try {\n    await joiValidateAsync(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n  await startExpoServerAsync(projectRoot);\n  await startReactNativeServerAsync(projectRoot, options, verbose);\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  DevSession.startSession(projectRoot, exp);\n  return exp;\n}\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n    });\n  }\n}\n"],"sourceRoot":"/xdl@51.5.3/src"}