{"version":3,"sources":["commands/build.js"],"names":["program","command","alias","option","description","asyncActionProjectDir","projectDir","options","publicUrl","isHttps","channelRe","RegExp","test","releaseChannel","error","process","exit","type","undefined","iosBuilder","androidBuilder","builder","checkStatus","platform","current"],"mappings":"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","file":"../../commands/build.js","sourcesContent":["/**\n * @flow\n */\n\nimport { UrlUtils } from 'xdl';\nimport BaseBuilder from './build/BaseBuilder';\nimport IOSBuilder from './build/IOSBuilder';\nimport AndroidBuilder from './build/AndroidBuilder';\nimport BuildError from './build/BuildError';\nimport log from '../log';\nimport CommandError from '../CommandError';\n\nexport default (program: any) => {\n  program\n    .command('build:ios [project-dir]')\n    .alias('bi')\n    .option('-c, --clear-credentials', 'Clear credentials stored on expo servers')\n    .option(\n      '--clear-app-credentials',\n      'Remove app related credentials stored on expo servers (iOS)'\n    )\n    .option('--clear-dist-cert', 'Remove distribution cert stored on expo servers (iOS)')\n    .option('-e, --apple-enterprise-account', 'Run as Apple Enterprise account')\n    .option(\n      '--apple-id <login>',\n      'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable)'\n    )\n    .option(\n      '--revoke-apple-dist-certs',\n      'Revoke distribution certs on developer.apple.com before attempting to make new certs, must use with -c'\n    )\n    .option(\n      '--revoke-apple-push-certs',\n      'Revoke push certs on developer.apple.com before attempting to make new certs, must use with -c'\n    )\n    .option(\n      '--revoke-apple-provisioning-profile',\n      'Revoke provisioning profile on developer.apple.com, must use with -c'\n    )\n    .option('-t --type <build>', 'Type of build: [archive|simulator].', /^(archive|simulator)$/i)\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .option('--no-publish', 'Disable automatic publishing before building.')\n    .option('--no-wait', 'Exit immediately after triggering build.')\n    .option('--team-id <apple-teamId>', 'Apple Team ID.')\n    .option('--dist-p12-path <dist.p12>', 'Path to your Distribution Certificate P12.')\n    .option('--push-p12-path <push.p12>', 'Path to your Push Notification Certificate P12.')\n    .option('--provisioning-profile-path <.mobileprovision>', 'Path to your Provisioning Profile.')\n    .option(\n      '--public-url <url>',\n      'The URL of an externally hosted manifest (for self-hosted apps).'\n    )\n    .description(\n      'Build a standalone IPA for your project, signed and ready for submission to the Apple App Store.'\n    )\n    .asyncActionProjectDir((projectDir, options) => {\n      if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n        throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n      }\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      if (\n        options.type !== undefined &&\n        options.type !== 'archive' &&\n        options.type !== 'simulator'\n      ) {\n        log.error('Build type must be one of {archive, simulator}');\n        process.exit(1);\n      }\n      const iosBuilder = new IOSBuilder(projectDir, options);\n      return iosBuilder.command(options);\n    });\n\n  program\n    .command('build:android [project-dir]')\n    .alias('ba')\n    .option('-c, --clear-credentials', 'Clear stored credentials.')\n    .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n    .option('--no-publish', 'Disable automatic publishing before building.')\n    .option('--no-wait', 'Exit immediately after triggering build.')\n    .option('--keystore-path <app.jks>', 'Path to your Keystore.')\n    .option('--keystore-alias <alias>', 'Keystore Alias')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description(\n      'Build a standalone APK for your project, signed and ready for submission to the Google Play Store.'\n    )\n    .asyncActionProjectDir((projectDir, options) => {\n      if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n        throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n      }\n      let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n      if (!channelRe.test(options.releaseChannel)) {\n        log.error(\n          'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n        );\n        process.exit(1);\n      }\n      const androidBuilder = new AndroidBuilder(projectDir, options);\n      return androidBuilder.command(options);\n    });\n\n  program\n    .command('build:status [project-dir]')\n    .alias('bs')\n    .option(\n      '--public-url <url>',\n      'The URL of an externally hosted manifest (for self-hosted apps).'\n    )\n    .description(`Gets the status of a current (or most recently finished) build for your project.`)\n    .asyncActionProjectDir(async (projectDir, options) => {\n      if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n        throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n      }\n      const builder = new BaseBuilder(projectDir, options);\n      try {\n        return await builder.checkStatus({\n          platform: 'all',\n          current: false,\n          ...(options.publicUrl ? { publicUrl: options.publicUrl } : {}),\n        });\n      } catch (e) {\n        if (e instanceof BuildError) {\n          return;\n        }\n        throw e;\n      }\n    }, /* skipProjectValidation: */ true);\n};\n"],"sourceRoot":"/expo-cli@2.3.3/src"}