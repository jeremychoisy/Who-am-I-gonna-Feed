{"version":3,"sources":["commands/generate-universal.js"],"names":["NPM_TEMPLATE_VERSION","TEMP_DIR_NAME","archive","decompress","resolve","reject","src","dest","error","program","command","description","asyncAction","template","name","message","configuration","execSync","toString","slice","mkdirpSync","unlinkSync","outputDir","jsName","copy","join","remove","podName","renameSync","nodir","file","readFile","path","contents","newContents","replace","javaModule","writeFile","setAsync","javaDir","split","placeholderPath","appendFileSync"],"mappings":"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","file":"../../commands/generate-universal.js","sourcesContent":["/**\n * @flow\n */\nimport path from 'path';\nimport proc from 'child_process';\nimport targz from 'targz';\nimport fs from 'fs-extra';\nimport walkSync from 'klaw-sync';\nimport JsonFile from '@expo/json-file';\n\nimport CommandError from '../CommandError';\nimport prompt from '../prompt';\n\nconst NPM_TEMPLATE_VERSION = '^1.0.1';\nconst TEMP_DIR_NAME = `temp-expo-module-template`;\nlet archive;\n\nconst decompress = async () => {\n  return new Promise((resolve, reject) => {\n    targz.decompress(\n      {\n        src: archive,\n        dest: TEMP_DIR_NAME,\n      },\n      error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      }\n    );\n  });\n};\n\nexport default (program: any) => {\n  program\n    .command('generate <template>')\n    .description('Generate a module from a template.')\n    .asyncAction(async template => {\n      if (template !== 'universal') {\n        throw new CommandError(\n          'UNKNOWN_TEMPLATE',\n          `Template not found: '${template}'. Valid options are: universal`\n        );\n      }\n      const configuration = await prompt([\n        {\n          name: 'jsName',\n          message: 'How would you like to call your module in JS/npm? (eg. expo-camera)',\n        },\n        {\n          name: 'podName',\n          message:\n            'How would you like to call your module in CocoaPods? (eg. EXCamera) (leave empty to not include iOS part)',\n        },\n        {\n          name: 'javaModule',\n          message: 'How would you like to call your module in Java? (eg. expo.modules.camera)',\n        },\n      ]);\n\n      archive = proc\n        .execSync(`npm pack expo-module-template@${NPM_TEMPLATE_VERSION}`)\n        .toString()\n        .slice(0, -1);\n\n      fs.mkdirpSync(TEMP_DIR_NAME);\n      await decompress();\n\n      fs.unlinkSync(archive);\n      let outputDir = path.resolve(configuration.jsName);\n      await fs.copy(path.join(TEMP_DIR_NAME, `package`), outputDir);\n      await fs.remove(TEMP_DIR_NAME);\n\n      if (configuration.podName) {\n        fs.renameSync(\n          path.join(outputDir, `ios`, `EXModuleTemplate.podspec`),\n          path.join(outputDir, `ios`, `${configuration.podName}.podspec`)\n        );\n\n        fs.renameSync(\n          path.join(outputDir, `ios`, `EXModuleTemplate`, `EXModuleTemplate.h`),\n          path.join(outputDir, `ios`, `EXModuleTemplate`, `${configuration.podName}.h`)\n        );\n\n        fs.renameSync(\n          path.join(outputDir, `ios`, `EXModuleTemplate`, `EXModuleTemplate.m`),\n          path.join(outputDir, `ios`, `EXModuleTemplate`, `${configuration.podName}.m`)\n        );\n\n        fs.renameSync(\n          path.join(outputDir, `ios`, `EXModuleTemplate`),\n          path.join(outputDir, `ios`, `${configuration.podName}`)\n        );\n\n        fs.renameSync(\n          path.join(outputDir, `ios`, `EXModuleTemplate.xcodeproj`),\n          path.join(outputDir, `ios`, `${configuration.podName}.xcodeproj`)\n        );\n      } else {\n        await fs.remove(path.join(outputDir, `ios`));\n      }\n\n      for (let file of walkSync(outputDir, { nodir: true })) {\n        let contents = await fs.readFile(file.path, 'utf8');\n        let newContents = contents\n          .replace(/expo-module-template/g, configuration.jsName)\n          .replace(/expo\\.modules\\.template/g, configuration.javaModule)\n          .replace(/EXModuleTemplate/g, configuration.podName);\n        if (newContents !== contents) {\n          await fs.writeFile(file.path, newContents);\n        }\n      }\n      await JsonFile.setAsync(path.join(configuration.jsName, 'package.json'), 'version', '1.0.0');\n\n      const javaDir = path.join(\n        configuration.jsName,\n        'android',\n        'src',\n        'main',\n        'java',\n        ...configuration.javaModule.split('.')\n      );\n      fs.mkdirpSync(javaDir);\n\n      const placeholderPath = path.join(javaDir, `Placeholder.java`);\n      fs.appendFileSync(placeholderPath, `package ${configuration.javaModule};\\n`);\n      fs.appendFileSync(placeholderPath, `class Placeholder {}`);\n    });\n};\n"],"sourceRoot":"/expo-cli@2.3.3/src"}