{"version":3,"sources":["commands/start.js"],"names":["projectDir","options","optsAsync","gray","root","resolve","startOpts","clear","reset","maxWorkers","startAsync","devToolsUrl","underline","nonInteractive","parent","readConfigJsonAsync","exp","isDetached","getAsync","bold","wait","constructManifestUrlAsync","url","getRecipient","sendTo","recipient","sendUrlAsync","handleMobileOptsAsync","isDetachexped","newLine","printQRCode","nested","green","action","program","command","alias","description","option","urlOpts","allowOffline","asyncActionProjectDir"],"mappings":"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","file":"../../commands/start.js","sourcesContent":["/**\n * @flow\n */\n\nimport { DevToolsServer } from '@expo/dev-tools';\nimport { ProjectUtils, ProjectSettings, Project, UserSettings, UrlUtils } from 'xdl';\nimport chalk from 'chalk';\nimport opn from 'opn';\nimport path from 'path';\n\nimport prompt from '../prompt';\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\nimport urlOpts from '../urlOpts';\nimport * as TerminalUI from './start/TerminalUI';\n\nasync function action(projectDir, options) {\n  installExitHooks(projectDir);\n\n  await urlOpts.optsAsync(projectDir, options);\n\n  log(chalk.gray('Starting project at', projectDir));\n\n  let root = path.resolve(projectDir);\n  let startOpts = {};\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  if (options.maxWorkers) {\n    startOpts.maxWorkers = options.maxWorkers;\n  }\n\n  let devToolsUrl = await DevToolsServer.startAsync(root);\n  log(`Expo DevTools is running at ${chalk.underline(devToolsUrl)}`);\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n\n  if (!nonInteractive && !exp.isDetached) {\n    if (await UserSettings.getAsync('openDevToolsAtStartup', true)) {\n      log(`Opening DevTools in the browser... (press ${chalk.bold`shift-d`} to disable)`);\n      opn(devToolsUrl, { wait: false });\n    } else {\n      log(\n        `Press ${chalk.bold`d`} to open DevTools now, or ${chalk.bold`shift-d`} to always open it automatically.`\n      );\n    }\n  }\n\n  await Project.startAsync(root, startOpts);\n\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  const recipient = await sendTo.getRecipient(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n\n  if (!nonInteractive && !exp.isDetachexped) {\n    await TerminalUI.startAsync(projectDir);\n  } else {\n    if (!exp.isDetached) {\n      log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    log(`Your app is running at ${chalk.underline(url)}`);\n  }\n\n  log.nested(chalk.green('Logs for your project will appear below. Press Ctrl+C to exit.'));\n}\n\nexport default (program: any) => {\n  program\n    .command('start [project-dir]')\n    .alias('r')\n    .description('Starts or restarts a local server for your app and gives you a URL to it')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action, true, true);\n};\n"],"sourceRoot":"/expo-cli@2.3.3/src"}