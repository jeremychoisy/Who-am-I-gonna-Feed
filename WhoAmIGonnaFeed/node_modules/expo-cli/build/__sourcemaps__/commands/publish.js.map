{"version":3,"sources":["commands/publish.js"],"names":["projectDir","options","channelRe","RegExp","releaseChannel","test","error","process","exit","currentStatus","status","startedOurOwn","startOpts","reset","clear","nonPersistent","maxWorkers","startAsync","quiet","getRecipient","sendTo","recipient","start","publishAsync","result","url","stop","underline","raw","sendUrlAsync","stopAsync","action","program","command","alias","description","option","asyncActionProjectDir"],"mappings":";;;;;;;;;;;;;;;;;;;;4IAoBO,iBAAsBA,UAAtB;AAAA,QAA0CC,OAA1C,uEAA6D,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,qBADC,GACW,IAAIC,MAAJ,CAAW,sBAAX,CADX;;AAEL,gBAAIF,QAAQG,cAAR,IAA0B,CAACF,UAAUG,IAAV,CAAeJ,QAAQG,cAAvB,CAA/B,EAAuE;AACrE,4CAAIE,KAAJ,CACE,mGADF;AAGAC,sBAAQC,IAAR,CAAa,CAAb;AACD;AAPI;AAAA,mBAQgB,8BAAQC,aAAR,CAAsBT,UAAtB,CARhB;;AAAA;AAQCU,kBARD;AAUDC,yBAVC,GAUe,KAVf;;AAAA,kBAWDD,WAAW,SAXV;AAAA;AAAA;AAAA;;AAYH,+CAAI,wFAAJ;AACA,0DAAiBV,UAAjB;;AAEMY,qBAfH,GAee,EAAEC,OAAOZ,QAAQa,KAAjB,EAAwBC,eAAe,IAAvC,EAff;;AAgBH,gBAAId,QAAQe,UAAZ,EAAwB;AACtBJ,wBAAUI,UAAV,GAAuBf,QAAQe,UAA/B;AACD;;AAlBE;AAAA,mBAoBG,8BAAQC,UAAR,CAAmBjB,UAAnB,EAA+BY,SAA/B,EAA0C,CAACX,QAAQiB,KAAnD,CApBH;;AAAA;AAqBHP,4BAAgB,IAAhB;;AArBG;AAAA;AAAA,mBAwBiB,oCAAOQ,YAAP,CAAoBlB,QAAQmB,MAA5B,CAxBjB;;AAAA;AAwBDC,qBAxBC;;AAyBL,4EAA8BpB,QAAQG,cAAtC;;AAEA,gBAAIH,QAAQiB,KAAZ,EAAmB;AACjB,gEAAcI,KAAd;AACD;;AA7BI;AAAA,mBA+Bc,8BAAQC,YAAR,CAAqBvB,UAArB,EAAiC;AAClDI,8BAAgBH,QAAQG;AAD0B,aAAjC,CA/Bd;;AAAA;AA+BDoB,kBA/BC;AAmCDC,eAnCC,GAmCKD,OAAOC,GAnCZ;;;AAqCL,gBAAIxB,QAAQiB,KAAZ,EAAmB;AACjB,gEAAcQ,IAAd;AACD;;AAED,+CAAI,WAAJ;AACA,+CAAI,oBAAoB,kCAAMC,SAAN,CAAgBF,GAAhB,CAApB,GAA2C,IAA/C;AACA,0CAAIG,GAAJ,CAAQH,GAAR;;AA3CK,iBA6CDJ,SA7CC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA8CG,oCAAOQ,YAAP,CAAoBJ,GAApB,EAAyBJ,SAAzB,CA9CH;;AAAA;AAAA,iBAiDDV,aAjDC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkDG,8BAAQmB,SAAR,CAAkB9B,UAAlB,CAlDH;;AAAA;AAAA,6CAqDEwB,MArDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,M;;;;;;;AAhBtB;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;kBAiEe,UAACC,OAAD,EAAkB;AAC/BA,UACGC,OADH,CACW,uBADX,EAEGC,KAFH,CAES,GAFT,EAGGC,WAHH,CAGe,oCAHf,EAIGC,MAJH,CAIU,aAJV,EAIyB,yDAJzB,EAKGA,MALH,CAKU,sBALV,EAKkC,oDALlC,EAMGA,MANH,CAMU,aANV,EAMyB,uCANzB;AAOE;AAPF,GAQGA,MARH,CAQU,qBARV,EAQiC,kDARjC,EASGA,MATH,CAUI,qCAVJ,EAWI,0DAXJ,EAYI,SAZJ,EAcGC,qBAdH,CAcyBN,MAdzB,EAciC,IAdjC;AAeD,C","file":"../../commands/publish.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport simpleSpinner from '@expo/simple-spinner';\n\nimport { Project } from 'xdl';\n\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport { installExitHooks } from '../exit';\n\ntype Options = {\n  clear?: boolean,\n  sendTo?: string,\n  quiet?: boolean,\n  releaseChannel?: string,\n};\n\nexport async function action(projectDir: string, options: Options = {}) {\n  let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n  if (options.releaseChannel && !channelRe.test(options.releaseChannel)) {\n    log.error(\n      'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n    );\n    process.exit(1);\n  }\n  const status = await Project.currentStatus(projectDir);\n\n  let startedOurOwn = false;\n  if (status !== 'running') {\n    log('Unable to find an existing Expo CLI instance for this directory, starting a new one...');\n    installExitHooks(projectDir);\n\n    const startOpts = { reset: options.clear, nonPersistent: true };\n    if (options.maxWorkers) {\n      startOpts.maxWorkers = options.maxWorkers;\n    }\n\n    await Project.startAsync(projectDir, startOpts, !options.quiet);\n    startedOurOwn = true;\n  }\n\n  let recipient = await sendTo.getRecipient(options.sendTo);\n  log(`Publishing to channel '${options.releaseChannel}'...`);\n\n  if (options.quiet) {\n    simpleSpinner.start();\n  }\n\n  let result = await Project.publishAsync(projectDir, {\n    releaseChannel: options.releaseChannel,\n  });\n\n  let url = result.url;\n\n  if (options.quiet) {\n    simpleSpinner.stop();\n  }\n\n  log('Published');\n  log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n  log.raw(url);\n\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  if (startedOurOwn) {\n    await Project.stopAsync(projectDir);\n  }\n\n  return result;\n}\n\nexport default (program: any) => {\n  program\n    .command('publish [project-dir]')\n    .alias('p')\n    .description('Publishes your project to exp.host')\n    .option('-q, --quiet', 'Suppress verbose output from the React Native packager.')\n    .option('-s, --send-to [dest]', 'A phone number or e-mail address to send a link to')\n    .option('-c, --clear', 'Clear the React Native packager cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option(\n      '--release-channel <release channel>',\n      \"The release channel to publish to. Default is 'default'.\",\n      'default'\n    )\n    .asyncActionProjectDir(action, true);\n};\n"],"sourceRoot":"/expo-cli@2.3.3/src"}