{"version":3,"sources":["exp.js"],"names":["checkForUpdateAsync","updateIsAvailable","current","latest","nestedWarn","green","name","subCommand","process","argv","writePathToUserSettingsAsync","writePathAsync","run","env","NODE_ENV","require","install","prototype","urlOpts","addOptions","allowOffline","option","asyncAction","asyncFn","skipUpdateCheck","action","args","options","last","output","config","raw","offline","flush","_isCommandError","error","message","_isApiError","red","isXDLError","EXPO_DEBUG","gray","stack","grey","exit","asyncActionProjectDir","skipProjectValidation","skipAuthCheck","projectDir","opts","cwd","resolve","pathToConfig","existsSync","Error","setCustomConfigPath","logLines","msg","logFn","split","line","logStackTrace","chunk","nestedLogFn","traceInfo","JSON","parse","e","addNewLineIfNone","bold","isLibraryFrame","startsWith","stackFrames","compact","lastAppCodeFrameIndex","findLastIndex","lastFrameIndexToLog","Math","min","length","unloggedFrames","i","match","printNewLineBeforeNextLog","logWithLevel","level","INFO","includesStack","nested","WARN","warn","nestedError","bar","packagerLogsStream","projectRoot","onStartBuildBundle","total","clear","complete","incomplete","setBundleProgressBar","onProgressBuildBundle","ticks","percent","curr","tick","onFinishBuildBundle","err","startTime","endTime","updateLogs","newLogChunks","updater","forEach","newLogChunk","issueId","issueCleared","attachLoggerStream","stream","write","tag","type","currentStatus","start","validateLowLatencyAsync","status","FATAL","stop","runAsync","programName","setSegmentNodeKey","setVersionName","version","_registerLogs","setInteractiveAuthenticationCallback","SERVER_URL","serverUrl","parsedUrl","api","host","hostname","port","developerTool","sync","__dirname","sort","commandModule","file","default","filter","arg","nonInteractive","stdin","isTTY","commands","push","command","alias","includes","console","log","help","code","START_LOADING","STOP_LOADING","DOWNLOAD_CLI_PROGRESS","ERROR","notifications","addStream","global","all","catch"],"mappings":"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","file":"../exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport ProgressBar from 'progress';\nimport _ from 'lodash';\nimport bunyan from '@expo/bunyan';\nimport chalk from 'chalk';\nimport glob from 'glob';\nimport fs from 'fs';\nimport path from 'path';\nimport simpleSpinner from '@expo/simple-spinner';\nimport url from 'url';\n\nimport program, { Command } from 'commander';\nimport {\n  Analytics,\n  Binaries,\n  Config,\n  Doctor,\n  Logger,\n  PackagerLogsStream,\n  NotificationCode,\n  Project,\n  ProjectUtils,\n  User as UserManager,\n} from 'xdl';\n\nimport { loginOrRegisterIfLoggedOut } from './accounts';\nimport log from './log';\nimport update from './update';\nimport urlOpts from './urlOpts';\nimport addCommonOptions from './commonOptions';\nimport packageJSON from '../package.json';\n\nif (process.env.NODE_ENV === 'development') {\n  require('source-map-support').install();\n}\n\n// The following prototyped functions are not used here, but within in each file found in `./commands`\n// Extending commander to easily add more options to certain command line arguments\nCommand.prototype.urlOpts = function() {\n  urlOpts.addOptions(this);\n  return this;\n};\n\nCommand.prototype.allowOffline = function() {\n  this.option('--offline', 'Allows this command to run while offline');\n  return this;\n};\n\n// asyncAction is a wrapper for all commands/actions to be executed after commander is done\n// parsing the command input\nCommand.prototype.asyncAction = function(asyncFn, skipUpdateCheck) {\n  addCommonOptions(this);\n  return this.action(async (...args) => {\n    if (!skipUpdateCheck) {\n      try {\n        await checkForUpdateAsync();\n      } catch (e) {}\n    }\n\n    try {\n      let options = _.last(args);\n      if (options.output === 'raw') {\n        log.config.raw = true;\n      }\n      if (options.offline) {\n        Config.offline = true;\n      }\n\n      await asyncFn(...args);\n      // After a command, flush the analytics queue so the program will not have any active timers\n      // This allows node js to exit immediately\n      Analytics.flush();\n    } catch (err) {\n      // TODO: Find better ways to consolidate error messages\n      if (err._isCommandError) {\n        log.error(err.message);\n      } else if (err._isApiError) {\n        log.error(chalk.red(err.message));\n      } else if (err.isXDLError) {\n        log.error(err.message);\n      } else {\n        log.error(err.message);\n        // TODO: Is there a better way to do this? EXPO_DEBUG needs to be set to view the stack trace\n        if (process.env.EXPO_DEBUG) {\n          log.error(chalk.gray(err.stack));\n        } else {\n          log.error(chalk.grey('Set EXPO_DEBUG=true in your env to view the stack trace.'));\n        }\n      }\n\n      process.exit(1);\n    }\n  });\n};\n\n// asyncActionProjectDir captures the projectDirectory from the command line,\n// setting it to cwd if it is not provided.\n// Commands such as `start` and `publish` use this.\n// It does several things:\n// - Everything in asyncAction\n// - Checks if the user is logged in or out\n// - Checks for updates\n// - Attaches the bundling logger\n// - Checks if the project directory is valid or not\n// - Runs AsyncAction with the projectDir as an argument\nCommand.prototype.asyncActionProjectDir = function(asyncFn, skipProjectValidation, skipAuthCheck) {\n  return this.asyncAction(async (projectDir, ...args) => {\n    const opts = args[0];\n\n    if (!projectDir) {\n      projectDir = process.cwd();\n    } else {\n      projectDir = path.resolve(process.cwd(), projectDir);\n    }\n\n    if (opts.config) {\n      const pathToConfig = path.resolve(process.cwd(), opts.config);\n      if (!fs.existsSync(pathToConfig)) {\n        throw new Error(`File at provide config path does not exist: ${pathToConfig}`);\n      }\n      ProjectUtils.setCustomConfigPath(projectDir, pathToConfig);\n    }\n\n    const logLines = (msg, logFn) => {\n      if (typeof msg === 'string') {\n        for (let line of msg.split('\\n')) {\n          logFn(line);\n        }\n      } else {\n        logFn(msg);\n      }\n    };\n\n    const logStackTrace = (chunk, logFn, nestedLogFn) => {\n      let traceInfo;\n      try {\n        traceInfo = JSON.parse(chunk.msg);\n      } catch (e) {\n        return logFn(chunk.msg);\n      }\n\n      let { message, stack } = traceInfo;\n      log.addNewLineIfNone();\n      logFn(chalk.bold(message));\n\n      const isLibraryFrame = line => {\n        return line.startsWith('node_modules');\n      };\n\n      let stackFrames = _.compact(stack.split('\\n'));\n      let lastAppCodeFrameIndex = _.findLastIndex(stackFrames, line => {\n        return !isLibraryFrame(line);\n      });\n      let lastFrameIndexToLog = Math.min(\n        stackFrames.length - 1,\n        lastAppCodeFrameIndex + 2 // show max two more frames after last app code frame\n      );\n      let unloggedFrames = stackFrames.length - lastFrameIndexToLog;\n\n      // If we're only going to exclude one frame, just log them all\n      if (unloggedFrames === 1) {\n        lastFrameIndexToLog = stackFrames.length - 1;\n        unloggedFrames = 0;\n      }\n\n      for (let i = 0; i <= lastFrameIndexToLog; i++) {\n        let line = stackFrames[i];\n        if (!line) {\n          continue;\n        } else if (line.match(/react-native\\/.*YellowBox.js/)) {\n          continue;\n        }\n\n        if (line.startsWith('node_modules')) {\n          nestedLogFn('- ' + line);\n        } else {\n          nestedLogFn('* ' + line);\n        }\n      }\n\n      if (unloggedFrames > 0) {\n        nestedLogFn(`- ... ${unloggedFrames} more stack frames from framework internals`);\n      }\n\n      log.printNewLineBeforeNextLog();\n    };\n\n    const logWithLevel = chunk => {\n      if (!chunk.msg) {\n        return;\n      }\n      if (chunk.level <= bunyan.INFO) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log, log.nested);\n        } else {\n          logLines(chunk.msg, log);\n        }\n      } else if (chunk.level === bunyan.WARN) {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.warn, log.nestedWarn);\n        } else {\n          logLines(chunk.msg, log.warn);\n        }\n      } else {\n        if (chunk.includesStack) {\n          logStackTrace(chunk, log.error, log.nestedError);\n        } else {\n          logLines(chunk.msg, log.error);\n        }\n      }\n    };\n\n    let bar;\n    let packagerLogsStream = new PackagerLogsStream({\n      projectRoot: projectDir,\n      onStartBuildBundle: () => {\n        bar = new ProgressBar('Building JavaScript bundle [:bar] :percent', {\n          total: 100,\n          clear: true,\n          complete: '=',\n          incomplete: ' ',\n        });\n\n        log.setBundleProgressBar(bar);\n      },\n      onProgressBuildBundle: percent => {\n        if (!bar || bar.complete) return;\n        let ticks = percent - bar.curr;\n        ticks > 0 && bar.tick(ticks);\n      },\n      onFinishBuildBundle: (err, startTime: Date, endTime: Date) => {\n        if (bar && !bar.complete) {\n          bar.tick(100 - bar.curr);\n        }\n\n        if (bar) {\n          log.setBundleProgressBar(null);\n          bar = null;\n\n          if (err) {\n            log(chalk.red('Failed building JavaScript bundle.'));\n          } else {\n            log(chalk.green(`Finished building JavaScript bundle in ${endTime - startTime}ms.`));\n          }\n        }\n      },\n      updateLogs: updater => {\n        let newLogChunks = updater([]);\n        newLogChunks.forEach(newLogChunk => {\n          if (newLogChunk.issueId && newLogChunk.issueCleared) {\n            return;\n          }\n          logWithLevel(newLogChunk);\n        });\n      },\n    });\n\n    // needed for validation logging to function\n    ProjectUtils.attachLoggerStream(projectDir, {\n      stream: {\n        write: chunk => {\n          if (chunk.tag === 'device') {\n            logWithLevel(chunk);\n          }\n        },\n      },\n      type: 'raw',\n    });\n\n    // The existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid\n    // validation (eg for init)\n    //\n    // If the packager/manifest server is running and healthy, there is no need\n    // to rerun Doctor because the directory was already checked previously\n    // This is relevant for command such as `send`\n    if (!skipProjectValidation && (await Project.currentStatus(projectDir)) !== 'running') {\n      log('Making sure project is set up correctly...');\n      simpleSpinner.start();\n      // validate that this is a good projectDir before we try anything else\n\n      let status = await Doctor.validateLowLatencyAsync(projectDir);\n      if (status === Doctor.FATAL) {\n        throw new Error(`There is an error with your project. See above logs for information.`);\n      }\n      simpleSpinner.stop();\n      log('Your project looks good!');\n    }\n\n    // the existing CLI modules only pass one argument to this function, so skipProjectValidation\n    // will be undefined in most cases. we can explicitly pass a truthy value here to avoid validation (eg for init)\n\n    return asyncFn(projectDir, ...args);\n  });\n};\n\nfunction runAsync(programName) {\n  try {\n    // Setup analytics\n    Analytics.setSegmentNodeKey('vGu92cdmVaggGA26s3lBX6Y5fILm8SQ7');\n    Analytics.setVersionName(packageJSON.version);\n    _registerLogs();\n\n    UserManager.setInteractiveAuthenticationCallback(loginOrRegisterIfLoggedOut);\n\n    if (process.env.SERVER_URL) {\n      let serverUrl = process.env.SERVER_URL;\n      if (!serverUrl.startsWith('http')) {\n        serverUrl = `http://${serverUrl}`;\n      }\n      let parsedUrl = url.parse(serverUrl);\n      Config.api.host = parsedUrl.hostname;\n      Config.api.port = parsedUrl.port;\n    }\n\n    Config.developerTool = packageJSON.name;\n\n    // Setup our commander instance\n    program.name = programName;\n    program\n      .version(packageJSON.version)\n      .option('-o, --output [format]', 'Output format. pretty (default), raw')\n      .option(\n        '--non-interactive',\n        'Fail, if an interactive prompt would be required to continue. Enabled by default if stdin is not a TTY.'\n      );\n\n    // Load each module found in ./commands by 'registering' it with our commander instance\n    glob\n      .sync('commands/*.js', { cwd: __dirname })\n      .sort()\n      .forEach(file => {\n        const commandModule = require(`./${file}`);\n        if (typeof commandModule === 'function') {\n          commandModule(program);\n        } else if (typeof commandModule.default === 'function') {\n          commandModule.default(program);\n        } else {\n          log.error(`'${file}.js' is not a properly formatted command.`);\n        }\n      });\n\n    if (process.env.EXPO_DEBUG) {\n      glob\n        .sync('debug_commands/*.js', {\n          cwd: __dirname,\n        })\n        .forEach(file => {\n          require(`./${file}`)(program);\n        });\n    }\n\n    let subCommand = process.argv[2];\n    let argv = process.argv.filter(arg => {\n      // Remove deprecated `--github` option here in order to fallback to password login/signup.\n      if (subCommand === 'login' && arg === '--github') {\n        log.nestedWarn(\n          'GitHub login is not currently available.\\nPlease log in with your Expo account.'\n        );\n        return false;\n      }\n      if (subCommand === 'register' && arg === '--github') {\n        log.nestedWarn('GitHub sign up is not currently available.');\n        return false;\n      }\n      return true;\n    });\n    program.parse(argv);\n\n    if (typeof program.nonInteractive === 'undefined') {\n      // Commander doesn't initialize boolean args with default values.\n      program.nonInteractive = !process.stdin.isTTY;\n    }\n\n    // Display a message if the user does not input a valid command\n    if (subCommand) {\n      let commands = [];\n      program.commands.forEach(command => {\n        commands.push(command['_name']);\n        let alias = command['_alias'];\n        if (alias) {\n          commands.push(alias);\n        }\n      });\n      if (!_.includes(commands, subCommand)) {\n        console.log(\n          `\"${subCommand}\" is not an ${programName} command. See \"${programName} --help\" for the full list of commands.`\n        );\n      }\n    } else {\n      program.help();\n    }\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n}\n\nasync function checkForUpdateAsync() {\n  let { updateIsAvailable, current, latest } = await update.checkForUpdateAsync();\n  if (updateIsAvailable) {\n    log.nestedWarn(\n      chalk.green(`There is a new version of ${packageJSON.name} available (${latest}).\nYou are currently using ${packageJSON.name} ${current}\nRun \\`npm install -g ${packageJSON.name}\\` to get the latest version`)\n    );\n  }\n}\n\nfunction _registerLogs() {\n  let stream = {\n    stream: {\n      write: chunk => {\n        if (chunk.code) {\n          switch (chunk.code) {\n            case NotificationCode.START_LOADING:\n              simpleSpinner.start();\n              return;\n            case NotificationCode.STOP_LOADING:\n              simpleSpinner.stop();\n              return;\n            case NotificationCode.DOWNLOAD_CLI_PROGRESS:\n              return;\n          }\n        }\n\n        if (chunk.level === bunyan.INFO) {\n          log(chunk.msg);\n        } else if (chunk.level === bunyan.WARN) {\n          log.warn(chunk.msg);\n        } else if (chunk.level >= bunyan.ERROR) {\n          log.error(chunk.msg);\n        }\n      },\n    },\n    type: 'raw',\n  };\n\n  Logger.notifications.addStream(stream);\n  Logger.global.addStream(stream);\n}\n\nasync function writePathAsync() {\n  let subCommand = process.argv[2];\n  if (subCommand === 'prepare-detached-build') {\n    // This is being run from Android Studio or Xcode. Don't want to write PATH in this case.\n    return;\n  }\n\n  await Binaries.writePathToUserSettingsAsync();\n}\n\n// This is the entry point of the CLI\nexport function run(programName) {\n  (async function() {\n    await Promise.all([writePathAsync(), runAsync(programName)]);\n  })().catch(e => {\n    console.error('Uncaught Error', e);\n    process.exit(1);\n  });\n}\n"],"sourceRoot":"/expo-cli@2.3.3/src"}